// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ServerSkuAuxDevice is an object representing the database table.
type ServerSkuAuxDevice struct {
	ID         string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	SkuID      string     `boil:"sku_id" json:"sku_id" toml:"sku_id" yaml:"sku_id"`
	Vendor     string     `boil:"vendor" json:"vendor" toml:"vendor" yaml:"vendor"`
	Model      string     `boil:"model" json:"model" toml:"model" yaml:"model"`
	DeviceType string     `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	Details    types.JSON `boil:"details" json:"details" toml:"details" yaml:"details"`
	CreatedAt  null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *serverSkuAuxDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverSkuAuxDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerSkuAuxDeviceColumns = struct {
	ID         string
	SkuID      string
	Vendor     string
	Model      string
	DeviceType string
	Details    string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	SkuID:      "sku_id",
	Vendor:     "vendor",
	Model:      "model",
	DeviceType: "device_type",
	Details:    "details",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var ServerSkuAuxDeviceTableColumns = struct {
	ID         string
	SkuID      string
	Vendor     string
	Model      string
	DeviceType string
	Details    string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "server_sku_aux_device.id",
	SkuID:      "server_sku_aux_device.sku_id",
	Vendor:     "server_sku_aux_device.vendor",
	Model:      "server_sku_aux_device.model",
	DeviceType: "server_sku_aux_device.device_type",
	Details:    "server_sku_aux_device.details",
	CreatedAt:  "server_sku_aux_device.created_at",
	UpdatedAt:  "server_sku_aux_device.updated_at",
}

// Generated where

var ServerSkuAuxDeviceWhere = struct {
	ID         whereHelperstring
	SkuID      whereHelperstring
	Vendor     whereHelperstring
	Model      whereHelperstring
	DeviceType whereHelperstring
	Details    whereHelpertypes_JSON
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"server_sku_aux_device\".\"id\""},
	SkuID:      whereHelperstring{field: "\"server_sku_aux_device\".\"sku_id\""},
	Vendor:     whereHelperstring{field: "\"server_sku_aux_device\".\"vendor\""},
	Model:      whereHelperstring{field: "\"server_sku_aux_device\".\"model\""},
	DeviceType: whereHelperstring{field: "\"server_sku_aux_device\".\"device_type\""},
	Details:    whereHelpertypes_JSON{field: "\"server_sku_aux_device\".\"details\""},
	CreatedAt:  whereHelpernull_Time{field: "\"server_sku_aux_device\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"server_sku_aux_device\".\"updated_at\""},
}

// ServerSkuAuxDeviceRels is where relationship names are stored.
var ServerSkuAuxDeviceRels = struct {
	Sku string
}{
	Sku: "Sku",
}

// serverSkuAuxDeviceR is where relationships are stored.
type serverSkuAuxDeviceR struct {
	Sku *ServerSku `boil:"Sku" json:"Sku" toml:"Sku" yaml:"Sku"`
}

// NewStruct creates a new relationship struct
func (*serverSkuAuxDeviceR) NewStruct() *serverSkuAuxDeviceR {
	return &serverSkuAuxDeviceR{}
}

func (r *serverSkuAuxDeviceR) GetSku() *ServerSku {
	if r == nil {
		return nil
	}
	return r.Sku
}

// serverSkuAuxDeviceL is where Load methods for each relationship are stored.
type serverSkuAuxDeviceL struct{}

var (
	serverSkuAuxDeviceAllColumns            = []string{"id", "sku_id", "vendor", "model", "device_type", "details", "created_at", "updated_at"}
	serverSkuAuxDeviceColumnsWithoutDefault = []string{"sku_id", "vendor", "model", "device_type", "details"}
	serverSkuAuxDeviceColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	serverSkuAuxDevicePrimaryKeyColumns     = []string{"id"}
	serverSkuAuxDeviceGeneratedColumns      = []string{}
)

type (
	// ServerSkuAuxDeviceSlice is an alias for a slice of pointers to ServerSkuAuxDevice.
	// This should almost always be used instead of []ServerSkuAuxDevice.
	ServerSkuAuxDeviceSlice []*ServerSkuAuxDevice
	// ServerSkuAuxDeviceHook is the signature for custom ServerSkuAuxDevice hook methods
	ServerSkuAuxDeviceHook func(context.Context, boil.ContextExecutor, *ServerSkuAuxDevice) error

	serverSkuAuxDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverSkuAuxDeviceType                 = reflect.TypeOf(&ServerSkuAuxDevice{})
	serverSkuAuxDeviceMapping              = queries.MakeStructMapping(serverSkuAuxDeviceType)
	serverSkuAuxDevicePrimaryKeyMapping, _ = queries.BindMapping(serverSkuAuxDeviceType, serverSkuAuxDeviceMapping, serverSkuAuxDevicePrimaryKeyColumns)
	serverSkuAuxDeviceInsertCacheMut       sync.RWMutex
	serverSkuAuxDeviceInsertCache          = make(map[string]insertCache)
	serverSkuAuxDeviceUpdateCacheMut       sync.RWMutex
	serverSkuAuxDeviceUpdateCache          = make(map[string]updateCache)
	serverSkuAuxDeviceUpsertCacheMut       sync.RWMutex
	serverSkuAuxDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverSkuAuxDeviceAfterSelectHooks []ServerSkuAuxDeviceHook

var serverSkuAuxDeviceBeforeInsertHooks []ServerSkuAuxDeviceHook
var serverSkuAuxDeviceAfterInsertHooks []ServerSkuAuxDeviceHook

var serverSkuAuxDeviceBeforeUpdateHooks []ServerSkuAuxDeviceHook
var serverSkuAuxDeviceAfterUpdateHooks []ServerSkuAuxDeviceHook

var serverSkuAuxDeviceBeforeDeleteHooks []ServerSkuAuxDeviceHook
var serverSkuAuxDeviceAfterDeleteHooks []ServerSkuAuxDeviceHook

var serverSkuAuxDeviceBeforeUpsertHooks []ServerSkuAuxDeviceHook
var serverSkuAuxDeviceAfterUpsertHooks []ServerSkuAuxDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerSkuAuxDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerSkuAuxDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerSkuAuxDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerSkuAuxDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerSkuAuxDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerSkuAuxDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerSkuAuxDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerSkuAuxDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerSkuAuxDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAuxDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerSkuAuxDeviceHook registers your hook function for all future operations.
func AddServerSkuAuxDeviceHook(hookPoint boil.HookPoint, serverSkuAuxDeviceHook ServerSkuAuxDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		serverSkuAuxDeviceAfterSelectHooks = append(serverSkuAuxDeviceAfterSelectHooks, serverSkuAuxDeviceHook)
	case boil.BeforeInsertHook:
		serverSkuAuxDeviceBeforeInsertHooks = append(serverSkuAuxDeviceBeforeInsertHooks, serverSkuAuxDeviceHook)
	case boil.AfterInsertHook:
		serverSkuAuxDeviceAfterInsertHooks = append(serverSkuAuxDeviceAfterInsertHooks, serverSkuAuxDeviceHook)
	case boil.BeforeUpdateHook:
		serverSkuAuxDeviceBeforeUpdateHooks = append(serverSkuAuxDeviceBeforeUpdateHooks, serverSkuAuxDeviceHook)
	case boil.AfterUpdateHook:
		serverSkuAuxDeviceAfterUpdateHooks = append(serverSkuAuxDeviceAfterUpdateHooks, serverSkuAuxDeviceHook)
	case boil.BeforeDeleteHook:
		serverSkuAuxDeviceBeforeDeleteHooks = append(serverSkuAuxDeviceBeforeDeleteHooks, serverSkuAuxDeviceHook)
	case boil.AfterDeleteHook:
		serverSkuAuxDeviceAfterDeleteHooks = append(serverSkuAuxDeviceAfterDeleteHooks, serverSkuAuxDeviceHook)
	case boil.BeforeUpsertHook:
		serverSkuAuxDeviceBeforeUpsertHooks = append(serverSkuAuxDeviceBeforeUpsertHooks, serverSkuAuxDeviceHook)
	case boil.AfterUpsertHook:
		serverSkuAuxDeviceAfterUpsertHooks = append(serverSkuAuxDeviceAfterUpsertHooks, serverSkuAuxDeviceHook)
	}
}

// One returns a single serverSkuAuxDevice record from the query.
func (q serverSkuAuxDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerSkuAuxDevice, error) {
	o := &ServerSkuAuxDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_sku_aux_device")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerSkuAuxDevice records from the query.
func (q serverSkuAuxDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSkuAuxDeviceSlice, error) {
	var o []*ServerSkuAuxDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerSkuAuxDevice slice")
	}

	if len(serverSkuAuxDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerSkuAuxDevice records in the query.
func (q serverSkuAuxDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_sku_aux_device rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverSkuAuxDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_sku_aux_device exists")
	}

	return count > 0, nil
}

// Sku pointed to by the foreign key.
func (o *ServerSkuAuxDevice) Sku(mods ...qm.QueryMod) serverSkuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	return ServerSkus(queryMods...)
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverSkuAuxDeviceL) LoadSku(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSkuAuxDevice interface{}, mods queries.Applicator) error {
	var slice []*ServerSkuAuxDevice
	var object *ServerSkuAuxDevice

	if singular {
		var ok bool
		object, ok = maybeServerSkuAuxDevice.(*ServerSkuAuxDevice)
		if !ok {
			object = new(ServerSkuAuxDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSkuAuxDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSkuAuxDevice))
			}
		}
	} else {
		s, ok := maybeServerSkuAuxDevice.(*[]*ServerSkuAuxDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSkuAuxDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSkuAuxDevice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuAuxDeviceR{}
		}
		args = append(args, object.SkuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuAuxDeviceR{}
			}

			for _, a := range args {
				if a == obj.SkuID {
					continue Outer
				}
			}

			args = append(args, obj.SkuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku`),
		qm.WhereIn(`server_sku.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerSku")
	}

	var resultSlice []*ServerSku
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerSku")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_sku")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku")
	}

	if len(serverSkuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &serverSkuR{}
		}
		foreign.R.SkuServerSkuAuxDevices = append(foreign.R.SkuServerSkuAuxDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkuID == foreign.ID {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &serverSkuR{}
				}
				foreign.R.SkuServerSkuAuxDevices = append(foreign.R.SkuServerSkuAuxDevices, local)
				break
			}
		}
	}

	return nil
}

// SetSku of the serverSkuAuxDevice to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuServerSkuAuxDevices.
func (o *ServerSkuAuxDevice) SetSku(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerSku) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_sku_aux_device\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverSkuAuxDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkuID = related.ID
	if o.R == nil {
		o.R = &serverSkuAuxDeviceR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &serverSkuR{
			SkuServerSkuAuxDevices: ServerSkuAuxDeviceSlice{o},
		}
	} else {
		related.R.SkuServerSkuAuxDevices = append(related.R.SkuServerSkuAuxDevices, o)
	}

	return nil
}

// ServerSkuAuxDevices retrieves all the records using an executor.
func ServerSkuAuxDevices(mods ...qm.QueryMod) serverSkuAuxDeviceQuery {
	mods = append(mods, qm.From("\"server_sku_aux_device\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"server_sku_aux_device\".*"})
	}

	return serverSkuAuxDeviceQuery{q}
}

// FindServerSkuAuxDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerSkuAuxDevice(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerSkuAuxDevice, error) {
	serverSkuAuxDeviceObj := &ServerSkuAuxDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_sku_aux_device\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverSkuAuxDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_sku_aux_device")
	}

	if err = serverSkuAuxDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverSkuAuxDeviceObj, err
	}

	return serverSkuAuxDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerSkuAuxDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku_aux_device provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuAuxDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverSkuAuxDeviceInsertCacheMut.RLock()
	cache, cached := serverSkuAuxDeviceInsertCache[key]
	serverSkuAuxDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverSkuAuxDeviceAllColumns,
			serverSkuAuxDeviceColumnsWithDefault,
			serverSkuAuxDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverSkuAuxDeviceType, serverSkuAuxDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverSkuAuxDeviceType, serverSkuAuxDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_sku_aux_device\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_sku_aux_device\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_sku_aux_device")
	}

	if !cached {
		serverSkuAuxDeviceInsertCacheMut.Lock()
		serverSkuAuxDeviceInsertCache[key] = cache
		serverSkuAuxDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerSkuAuxDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerSkuAuxDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverSkuAuxDeviceUpdateCacheMut.RLock()
	cache, cached := serverSkuAuxDeviceUpdateCache[key]
	serverSkuAuxDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverSkuAuxDeviceAllColumns,
			serverSkuAuxDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_sku_aux_device, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_sku_aux_device\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverSkuAuxDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverSkuAuxDeviceType, serverSkuAuxDeviceMapping, append(wl, serverSkuAuxDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_sku_aux_device row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_sku_aux_device")
	}

	if !cached {
		serverSkuAuxDeviceUpdateCacheMut.Lock()
		serverSkuAuxDeviceUpdateCache[key] = cache
		serverSkuAuxDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverSkuAuxDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_sku_aux_device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_sku_aux_device")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSkuAuxDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuAuxDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_sku_aux_device\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverSkuAuxDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverSkuAuxDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverSkuAuxDevice")
	}
	return rowsAff, nil
}

// Delete deletes a single ServerSkuAuxDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerSkuAuxDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerSkuAuxDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverSkuAuxDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"server_sku_aux_device\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_sku_aux_device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_sku_aux_device")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverSkuAuxDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverSkuAuxDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_sku_aux_device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku_aux_device")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSkuAuxDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverSkuAuxDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuAuxDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_sku_aux_device\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuAuxDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverSkuAuxDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku_aux_device")
	}

	if len(serverSkuAuxDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerSkuAuxDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerSkuAuxDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSkuAuxDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSkuAuxDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuAuxDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_sku_aux_device\".* FROM \"server_sku_aux_device\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuAuxDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSkuAuxDeviceSlice")
	}

	*o = slice

	return nil
}

// ServerSkuAuxDeviceExists checks if the ServerSkuAuxDevice row exists.
func ServerSkuAuxDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_sku_aux_device\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_sku_aux_device exists")
	}

	return exists, nil
}

// Exists checks if the ServerSkuAuxDevice row exists.
func (o *ServerSkuAuxDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ServerSkuAuxDeviceExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerSkuAuxDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku_aux_device provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuAuxDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverSkuAuxDeviceUpsertCacheMut.RLock()
	cache, cached := serverSkuAuxDeviceUpsertCache[key]
	serverSkuAuxDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverSkuAuxDeviceAllColumns,
			serverSkuAuxDeviceColumnsWithDefault,
			serverSkuAuxDeviceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverSkuAuxDeviceAllColumns,
			serverSkuAuxDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_sku_aux_device, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverSkuAuxDevicePrimaryKeyColumns))
			copy(conflict, serverSkuAuxDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_sku_aux_device\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverSkuAuxDeviceType, serverSkuAuxDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverSkuAuxDeviceType, serverSkuAuxDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_sku_aux_device")
	}

	if !cached {
		serverSkuAuxDeviceUpsertCacheMut.Lock()
		serverSkuAuxDeviceUpsertCache[key] = cache
		serverSkuAuxDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
