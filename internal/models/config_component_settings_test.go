// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testConfigComponentSettingsUpsert(t *testing.T) {
	t.Parallel()

	if len(configComponentSettingAllColumns) == len(configComponentSettingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ConfigComponentSetting{}
	if err = randomize.Struct(seed, &o, configComponentSettingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ConfigComponentSetting: %s", err)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, configComponentSettingDBTypes, false, configComponentSettingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ConfigComponentSetting: %s", err)
	}

	count, err = ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testConfigComponentSettings(t *testing.T) {
	t.Parallel()

	query := ConfigComponentSettings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testConfigComponentSettingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigComponentSettingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ConfigComponentSettings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigComponentSettingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConfigComponentSettingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigComponentSettingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ConfigComponentSettingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ConfigComponentSetting exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ConfigComponentSettingExists to return true, but got false.")
	}
}

func testConfigComponentSettingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	configComponentSettingFound, err := FindConfigComponentSetting(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if configComponentSettingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testConfigComponentSettingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ConfigComponentSettings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testConfigComponentSettingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ConfigComponentSettings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testConfigComponentSettingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	configComponentSettingOne := &ConfigComponentSetting{}
	configComponentSettingTwo := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, configComponentSettingOne, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}
	if err = randomize.Struct(seed, configComponentSettingTwo, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = configComponentSettingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = configComponentSettingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ConfigComponentSettings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testConfigComponentSettingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	configComponentSettingOne := &ConfigComponentSetting{}
	configComponentSettingTwo := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, configComponentSettingOne, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}
	if err = randomize.Struct(seed, configComponentSettingTwo, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = configComponentSettingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = configComponentSettingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func configComponentSettingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func configComponentSettingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponentSetting) error {
	*o = ConfigComponentSetting{}
	return nil
}

func testConfigComponentSettingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ConfigComponentSetting{}
	o := &ConfigComponentSetting{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting object: %s", err)
	}

	AddConfigComponentSettingHook(boil.BeforeInsertHook, configComponentSettingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	configComponentSettingBeforeInsertHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.AfterInsertHook, configComponentSettingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	configComponentSettingAfterInsertHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.AfterSelectHook, configComponentSettingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	configComponentSettingAfterSelectHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.BeforeUpdateHook, configComponentSettingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	configComponentSettingBeforeUpdateHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.AfterUpdateHook, configComponentSettingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	configComponentSettingAfterUpdateHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.BeforeDeleteHook, configComponentSettingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	configComponentSettingBeforeDeleteHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.AfterDeleteHook, configComponentSettingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	configComponentSettingAfterDeleteHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.BeforeUpsertHook, configComponentSettingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	configComponentSettingBeforeUpsertHooks = []ConfigComponentSettingHook{}

	AddConfigComponentSettingHook(boil.AfterUpsertHook, configComponentSettingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	configComponentSettingAfterUpsertHooks = []ConfigComponentSettingHook{}
}

func testConfigComponentSettingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfigComponentSettingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(configComponentSettingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfigComponentSettingToOneConfigComponentUsingFKComponent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ConfigComponentSetting
	var foreign ConfigComponent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, configComponentDBTypes, false, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FKComponentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FKComponent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddConfigComponentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ConfigComponentSettingSlice{&local}
	if err = local.L.LoadFKComponent(ctx, tx, false, (*[]*ConfigComponentSetting)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FKComponent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FKComponent = nil
	if err = local.L.LoadFKComponent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FKComponent == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testConfigComponentSettingToOneSetOpConfigComponentUsingFKComponent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ConfigComponentSetting
	var b, c ConfigComponent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, configComponentSettingDBTypes, false, strmangle.SetComplement(configComponentSettingPrimaryKeyColumns, configComponentSettingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, configComponentDBTypes, false, strmangle.SetComplement(configComponentPrimaryKeyColumns, configComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, configComponentDBTypes, false, strmangle.SetComplement(configComponentPrimaryKeyColumns, configComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ConfigComponent{&b, &c} {
		err = a.SetFKComponent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FKComponent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FKComponentConfigComponentSettings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FKComponentID != x.ID {
			t.Error("foreign key was wrong value", a.FKComponentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FKComponentID))
		reflect.Indirect(reflect.ValueOf(&a.FKComponentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FKComponentID != x.ID {
			t.Error("foreign key was wrong value", a.FKComponentID, x.ID)
		}
	}
}

func testConfigComponentSettingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConfigComponentSettingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConfigComponentSettingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConfigComponentSettingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ConfigComponentSettings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	configComponentSettingDBTypes = map[string]string{`ID`: `uuid`, `FKComponentID`: `uuid`, `SettingsKey`: `string`, `SettingsValue`: `string`, `Custom`: `jsonb`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                             = bytes.MinRead
)

func testConfigComponentSettingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(configComponentSettingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(configComponentSettingAllColumns) == len(configComponentSettingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testConfigComponentSettingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(configComponentSettingAllColumns) == len(configComponentSettingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponentSetting{}
	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponentSettings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, configComponentSettingDBTypes, true, configComponentSettingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConfigComponentSetting struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(configComponentSettingAllColumns, configComponentSettingPrimaryKeyColumns) {
		fields = configComponentSettingAllColumns
	} else {
		fields = strmangle.SetComplement(
			configComponentSettingAllColumns,
			configComponentSettingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ConfigComponentSettingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
