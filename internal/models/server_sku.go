// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServerSku is an object representing the database table.
type ServerSku struct {
	ID               string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Version          string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Vendor           string    `boil:"vendor" json:"vendor" toml:"vendor" yaml:"vendor"`
	Chassis          string    `boil:"chassis" json:"chassis" toml:"chassis" yaml:"chassis"`
	BMCModel         string    `boil:"bmc_model" json:"bmc_model" toml:"bmc_model" yaml:"bmc_model"`
	MotherboardModel string    `boil:"motherboard_model" json:"motherboard_model" toml:"motherboard_model" yaml:"motherboard_model"`
	CPUVendor        string    `boil:"cpu_vendor" json:"cpu_vendor" toml:"cpu_vendor" yaml:"cpu_vendor"`
	CPUModel         string    `boil:"cpu_model" json:"cpu_model" toml:"cpu_model" yaml:"cpu_model"`
	CPUCores         int64     `boil:"cpu_cores" json:"cpu_cores" toml:"cpu_cores" yaml:"cpu_cores"`
	CPUHertz         int64     `boil:"cpu_hertz" json:"cpu_hertz" toml:"cpu_hertz" yaml:"cpu_hertz"`
	CPUCount         int64     `boil:"cpu_count" json:"cpu_count" toml:"cpu_count" yaml:"cpu_count"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *serverSkuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverSkuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerSkuColumns = struct {
	ID               string
	Name             string
	Version          string
	Vendor           string
	Chassis          string
	BMCModel         string
	MotherboardModel string
	CPUVendor        string
	CPUModel         string
	CPUCores         string
	CPUHertz         string
	CPUCount         string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	Name:             "name",
	Version:          "version",
	Vendor:           "vendor",
	Chassis:          "chassis",
	BMCModel:         "bmc_model",
	MotherboardModel: "motherboard_model",
	CPUVendor:        "cpu_vendor",
	CPUModel:         "cpu_model",
	CPUCores:         "cpu_cores",
	CPUHertz:         "cpu_hertz",
	CPUCount:         "cpu_count",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var ServerSkuTableColumns = struct {
	ID               string
	Name             string
	Version          string
	Vendor           string
	Chassis          string
	BMCModel         string
	MotherboardModel string
	CPUVendor        string
	CPUModel         string
	CPUCores         string
	CPUHertz         string
	CPUCount         string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "server_sku.id",
	Name:             "server_sku.name",
	Version:          "server_sku.version",
	Vendor:           "server_sku.vendor",
	Chassis:          "server_sku.chassis",
	BMCModel:         "server_sku.bmc_model",
	MotherboardModel: "server_sku.motherboard_model",
	CPUVendor:        "server_sku.cpu_vendor",
	CPUModel:         "server_sku.cpu_model",
	CPUCores:         "server_sku.cpu_cores",
	CPUHertz:         "server_sku.cpu_hertz",
	CPUCount:         "server_sku.cpu_count",
	CreatedAt:        "server_sku.created_at",
	UpdatedAt:        "server_sku.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ServerSkuWhere = struct {
	ID               whereHelperstring
	Name             whereHelperstring
	Version          whereHelperstring
	Vendor           whereHelperstring
	Chassis          whereHelperstring
	BMCModel         whereHelperstring
	MotherboardModel whereHelperstring
	CPUVendor        whereHelperstring
	CPUModel         whereHelperstring
	CPUCores         whereHelperint64
	CPUHertz         whereHelperint64
	CPUCount         whereHelperint64
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"server_sku\".\"id\""},
	Name:             whereHelperstring{field: "\"server_sku\".\"name\""},
	Version:          whereHelperstring{field: "\"server_sku\".\"version\""},
	Vendor:           whereHelperstring{field: "\"server_sku\".\"vendor\""},
	Chassis:          whereHelperstring{field: "\"server_sku\".\"chassis\""},
	BMCModel:         whereHelperstring{field: "\"server_sku\".\"bmc_model\""},
	MotherboardModel: whereHelperstring{field: "\"server_sku\".\"motherboard_model\""},
	CPUVendor:        whereHelperstring{field: "\"server_sku\".\"cpu_vendor\""},
	CPUModel:         whereHelperstring{field: "\"server_sku\".\"cpu_model\""},
	CPUCores:         whereHelperint64{field: "\"server_sku\".\"cpu_cores\""},
	CPUHertz:         whereHelperint64{field: "\"server_sku\".\"cpu_hertz\""},
	CPUCount:         whereHelperint64{field: "\"server_sku\".\"cpu_count\""},
	CreatedAt:        whereHelpernull_Time{field: "\"server_sku\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"server_sku\".\"updated_at\""},
}

// ServerSkuRels is where relationship names are stored.
var ServerSkuRels = struct {
	SkuServerSkuAuxDevices string
	SkuServerSkuDisks      string
	SkuServerSkuMemories   string
	SkuServerSkuNics       string
}{
	SkuServerSkuAuxDevices: "SkuServerSkuAuxDevices",
	SkuServerSkuDisks:      "SkuServerSkuDisks",
	SkuServerSkuMemories:   "SkuServerSkuMemories",
	SkuServerSkuNics:       "SkuServerSkuNics",
}

// serverSkuR is where relationships are stored.
type serverSkuR struct {
	SkuServerSkuAuxDevices ServerSkuAuxDeviceSlice `boil:"SkuServerSkuAuxDevices" json:"SkuServerSkuAuxDevices" toml:"SkuServerSkuAuxDevices" yaml:"SkuServerSkuAuxDevices"`
	SkuServerSkuDisks      ServerSkuDiskSlice      `boil:"SkuServerSkuDisks" json:"SkuServerSkuDisks" toml:"SkuServerSkuDisks" yaml:"SkuServerSkuDisks"`
	SkuServerSkuMemories   ServerSkuMemorySlice    `boil:"SkuServerSkuMemories" json:"SkuServerSkuMemories" toml:"SkuServerSkuMemories" yaml:"SkuServerSkuMemories"`
	SkuServerSkuNics       ServerSkuNicSlice       `boil:"SkuServerSkuNics" json:"SkuServerSkuNics" toml:"SkuServerSkuNics" yaml:"SkuServerSkuNics"`
}

// NewStruct creates a new relationship struct
func (*serverSkuR) NewStruct() *serverSkuR {
	return &serverSkuR{}
}

func (r *serverSkuR) GetSkuServerSkuAuxDevices() ServerSkuAuxDeviceSlice {
	if r == nil {
		return nil
	}
	return r.SkuServerSkuAuxDevices
}

func (r *serverSkuR) GetSkuServerSkuDisks() ServerSkuDiskSlice {
	if r == nil {
		return nil
	}
	return r.SkuServerSkuDisks
}

func (r *serverSkuR) GetSkuServerSkuMemories() ServerSkuMemorySlice {
	if r == nil {
		return nil
	}
	return r.SkuServerSkuMemories
}

func (r *serverSkuR) GetSkuServerSkuNics() ServerSkuNicSlice {
	if r == nil {
		return nil
	}
	return r.SkuServerSkuNics
}

// serverSkuL is where Load methods for each relationship are stored.
type serverSkuL struct{}

var (
	serverSkuAllColumns            = []string{"id", "name", "version", "vendor", "chassis", "bmc_model", "motherboard_model", "cpu_vendor", "cpu_model", "cpu_cores", "cpu_hertz", "cpu_count", "created_at", "updated_at"}
	serverSkuColumnsWithoutDefault = []string{"name", "version", "vendor", "chassis", "bmc_model", "motherboard_model", "cpu_vendor", "cpu_model", "cpu_cores", "cpu_hertz", "cpu_count"}
	serverSkuColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	serverSkuPrimaryKeyColumns     = []string{"id"}
	serverSkuGeneratedColumns      = []string{}
)

type (
	// ServerSkuSlice is an alias for a slice of pointers to ServerSku.
	// This should almost always be used instead of []ServerSku.
	ServerSkuSlice []*ServerSku
	// ServerSkuHook is the signature for custom ServerSku hook methods
	ServerSkuHook func(context.Context, boil.ContextExecutor, *ServerSku) error

	serverSkuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverSkuType                 = reflect.TypeOf(&ServerSku{})
	serverSkuMapping              = queries.MakeStructMapping(serverSkuType)
	serverSkuPrimaryKeyMapping, _ = queries.BindMapping(serverSkuType, serverSkuMapping, serverSkuPrimaryKeyColumns)
	serverSkuInsertCacheMut       sync.RWMutex
	serverSkuInsertCache          = make(map[string]insertCache)
	serverSkuUpdateCacheMut       sync.RWMutex
	serverSkuUpdateCache          = make(map[string]updateCache)
	serverSkuUpsertCacheMut       sync.RWMutex
	serverSkuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverSkuAfterSelectHooks []ServerSkuHook

var serverSkuBeforeInsertHooks []ServerSkuHook
var serverSkuAfterInsertHooks []ServerSkuHook

var serverSkuBeforeUpdateHooks []ServerSkuHook
var serverSkuAfterUpdateHooks []ServerSkuHook

var serverSkuBeforeDeleteHooks []ServerSkuHook
var serverSkuAfterDeleteHooks []ServerSkuHook

var serverSkuBeforeUpsertHooks []ServerSkuHook
var serverSkuAfterUpsertHooks []ServerSkuHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerSku) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerSku) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerSku) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerSku) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerSku) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerSku) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerSku) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerSku) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerSku) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerSkuHook registers your hook function for all future operations.
func AddServerSkuHook(hookPoint boil.HookPoint, serverSkuHook ServerSkuHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		serverSkuAfterSelectHooks = append(serverSkuAfterSelectHooks, serverSkuHook)
	case boil.BeforeInsertHook:
		serverSkuBeforeInsertHooks = append(serverSkuBeforeInsertHooks, serverSkuHook)
	case boil.AfterInsertHook:
		serverSkuAfterInsertHooks = append(serverSkuAfterInsertHooks, serverSkuHook)
	case boil.BeforeUpdateHook:
		serverSkuBeforeUpdateHooks = append(serverSkuBeforeUpdateHooks, serverSkuHook)
	case boil.AfterUpdateHook:
		serverSkuAfterUpdateHooks = append(serverSkuAfterUpdateHooks, serverSkuHook)
	case boil.BeforeDeleteHook:
		serverSkuBeforeDeleteHooks = append(serverSkuBeforeDeleteHooks, serverSkuHook)
	case boil.AfterDeleteHook:
		serverSkuAfterDeleteHooks = append(serverSkuAfterDeleteHooks, serverSkuHook)
	case boil.BeforeUpsertHook:
		serverSkuBeforeUpsertHooks = append(serverSkuBeforeUpsertHooks, serverSkuHook)
	case boil.AfterUpsertHook:
		serverSkuAfterUpsertHooks = append(serverSkuAfterUpsertHooks, serverSkuHook)
	}
}

// One returns a single serverSku record from the query.
func (q serverSkuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerSku, error) {
	o := &ServerSku{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_sku")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerSku records from the query.
func (q serverSkuQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSkuSlice, error) {
	var o []*ServerSku

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerSku slice")
	}

	if len(serverSkuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerSku records in the query.
func (q serverSkuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_sku rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverSkuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_sku exists")
	}

	return count > 0, nil
}

// SkuServerSkuAuxDevices retrieves all the server_sku_aux_device's ServerSkuAuxDevices with an executor via sku_id column.
func (o *ServerSku) SkuServerSkuAuxDevices(mods ...qm.QueryMod) serverSkuAuxDeviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_sku_aux_device\".\"sku_id\"=?", o.ID),
	)

	return ServerSkuAuxDevices(queryMods...)
}

// SkuServerSkuDisks retrieves all the server_sku_disk's ServerSkuDisks with an executor via sku_id column.
func (o *ServerSku) SkuServerSkuDisks(mods ...qm.QueryMod) serverSkuDiskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_sku_disk\".\"sku_id\"=?", o.ID),
	)

	return ServerSkuDisks(queryMods...)
}

// SkuServerSkuMemories retrieves all the server_sku_memory's ServerSkuMemories with an executor via sku_id column.
func (o *ServerSku) SkuServerSkuMemories(mods ...qm.QueryMod) serverSkuMemoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_sku_memory\".\"sku_id\"=?", o.ID),
	)

	return ServerSkuMemories(queryMods...)
}

// SkuServerSkuNics retrieves all the server_sku_nic's ServerSkuNics with an executor via sku_id column.
func (o *ServerSku) SkuServerSkuNics(mods ...qm.QueryMod) serverSkuNicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_sku_nic\".\"sku_id\"=?", o.ID),
	)

	return ServerSkuNics(queryMods...)
}

// LoadSkuServerSkuAuxDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverSkuL) LoadSkuServerSkuAuxDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSku interface{}, mods queries.Applicator) error {
	var slice []*ServerSku
	var object *ServerSku

	if singular {
		var ok bool
		object, ok = maybeServerSku.(*ServerSku)
		if !ok {
			object = new(ServerSku)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSku))
			}
		}
	} else {
		s, ok := maybeServerSku.(*[]*ServerSku)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSku))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku_aux_device`),
		qm.WhereIn(`server_sku_aux_device.sku_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_sku_aux_device")
	}

	var resultSlice []*ServerSkuAuxDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_sku_aux_device")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_sku_aux_device")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku_aux_device")
	}

	if len(serverSkuAuxDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuServerSkuAuxDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverSkuAuxDeviceR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuServerSkuAuxDevices = append(local.R.SkuServerSkuAuxDevices, foreign)
				if foreign.R == nil {
					foreign.R = &serverSkuAuxDeviceR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuServerSkuDisks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverSkuL) LoadSkuServerSkuDisks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSku interface{}, mods queries.Applicator) error {
	var slice []*ServerSku
	var object *ServerSku

	if singular {
		var ok bool
		object, ok = maybeServerSku.(*ServerSku)
		if !ok {
			object = new(ServerSku)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSku))
			}
		}
	} else {
		s, ok := maybeServerSku.(*[]*ServerSku)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSku))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku_disk`),
		qm.WhereIn(`server_sku_disk.sku_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_sku_disk")
	}

	var resultSlice []*ServerSkuDisk
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_sku_disk")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_sku_disk")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku_disk")
	}

	if len(serverSkuDiskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuServerSkuDisks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverSkuDiskR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuServerSkuDisks = append(local.R.SkuServerSkuDisks, foreign)
				if foreign.R == nil {
					foreign.R = &serverSkuDiskR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuServerSkuMemories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverSkuL) LoadSkuServerSkuMemories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSku interface{}, mods queries.Applicator) error {
	var slice []*ServerSku
	var object *ServerSku

	if singular {
		var ok bool
		object, ok = maybeServerSku.(*ServerSku)
		if !ok {
			object = new(ServerSku)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSku))
			}
		}
	} else {
		s, ok := maybeServerSku.(*[]*ServerSku)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSku))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku_memory`),
		qm.WhereIn(`server_sku_memory.sku_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_sku_memory")
	}

	var resultSlice []*ServerSkuMemory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_sku_memory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_sku_memory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku_memory")
	}

	if len(serverSkuMemoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuServerSkuMemories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverSkuMemoryR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuServerSkuMemories = append(local.R.SkuServerSkuMemories, foreign)
				if foreign.R == nil {
					foreign.R = &serverSkuMemoryR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// LoadSkuServerSkuNics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (serverSkuL) LoadSkuServerSkuNics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSku interface{}, mods queries.Applicator) error {
	var slice []*ServerSku
	var object *ServerSku

	if singular {
		var ok bool
		object, ok = maybeServerSku.(*ServerSku)
		if !ok {
			object = new(ServerSku)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSku))
			}
		}
	} else {
		s, ok := maybeServerSku.(*[]*ServerSku)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSku)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSku))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku_nic`),
		qm.WhereIn(`server_sku_nic.sku_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_sku_nic")
	}

	var resultSlice []*ServerSkuNic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_sku_nic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_sku_nic")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku_nic")
	}

	if len(serverSkuNicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SkuServerSkuNics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverSkuNicR{}
			}
			foreign.R.Sku = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SkuID {
				local.R.SkuServerSkuNics = append(local.R.SkuServerSkuNics, foreign)
				if foreign.R == nil {
					foreign.R = &serverSkuNicR{}
				}
				foreign.R.Sku = local
				break
			}
		}
	}

	return nil
}

// AddSkuServerSkuAuxDevices adds the given related objects to the existing relationships
// of the server_sku, optionally inserting them as new records.
// Appends related to o.R.SkuServerSkuAuxDevices.
// Sets related.R.Sku appropriately.
func (o *ServerSku) AddSkuServerSkuAuxDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerSkuAuxDevice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_sku_aux_device\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverSkuAuxDevicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverSkuR{
			SkuServerSkuAuxDevices: related,
		}
	} else {
		o.R.SkuServerSkuAuxDevices = append(o.R.SkuServerSkuAuxDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverSkuAuxDeviceR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuServerSkuDisks adds the given related objects to the existing relationships
// of the server_sku, optionally inserting them as new records.
// Appends related to o.R.SkuServerSkuDisks.
// Sets related.R.Sku appropriately.
func (o *ServerSku) AddSkuServerSkuDisks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerSkuDisk) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_sku_disk\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverSkuDiskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverSkuR{
			SkuServerSkuDisks: related,
		}
	} else {
		o.R.SkuServerSkuDisks = append(o.R.SkuServerSkuDisks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverSkuDiskR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuServerSkuMemories adds the given related objects to the existing relationships
// of the server_sku, optionally inserting them as new records.
// Appends related to o.R.SkuServerSkuMemories.
// Sets related.R.Sku appropriately.
func (o *ServerSku) AddSkuServerSkuMemories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerSkuMemory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_sku_memory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverSkuMemoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverSkuR{
			SkuServerSkuMemories: related,
		}
	} else {
		o.R.SkuServerSkuMemories = append(o.R.SkuServerSkuMemories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverSkuMemoryR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// AddSkuServerSkuNics adds the given related objects to the existing relationships
// of the server_sku, optionally inserting them as new records.
// Appends related to o.R.SkuServerSkuNics.
// Sets related.R.Sku appropriately.
func (o *ServerSku) AddSkuServerSkuNics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerSkuNic) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SkuID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_sku_nic\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverSkuNicPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SkuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &serverSkuR{
			SkuServerSkuNics: related,
		}
	} else {
		o.R.SkuServerSkuNics = append(o.R.SkuServerSkuNics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverSkuNicR{
				Sku: o,
			}
		} else {
			rel.R.Sku = o
		}
	}
	return nil
}

// ServerSkus retrieves all the records using an executor.
func ServerSkus(mods ...qm.QueryMod) serverSkuQuery {
	mods = append(mods, qm.From("\"server_sku\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"server_sku\".*"})
	}

	return serverSkuQuery{q}
}

// FindServerSku retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerSku(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerSku, error) {
	serverSkuObj := &ServerSku{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_sku\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverSkuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_sku")
	}

	if err = serverSkuObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverSkuObj, err
	}

	return serverSkuObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerSku) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverSkuInsertCacheMut.RLock()
	cache, cached := serverSkuInsertCache[key]
	serverSkuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverSkuAllColumns,
			serverSkuColumnsWithDefault,
			serverSkuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverSkuType, serverSkuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverSkuType, serverSkuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_sku\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_sku\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_sku")
	}

	if !cached {
		serverSkuInsertCacheMut.Lock()
		serverSkuInsertCache[key] = cache
		serverSkuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerSku.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerSku) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverSkuUpdateCacheMut.RLock()
	cache, cached := serverSkuUpdateCache[key]
	serverSkuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverSkuAllColumns,
			serverSkuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_sku, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_sku\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverSkuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverSkuType, serverSkuMapping, append(wl, serverSkuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_sku row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_sku")
	}

	if !cached {
		serverSkuUpdateCacheMut.Lock()
		serverSkuUpdateCache[key] = cache
		serverSkuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverSkuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_sku")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_sku")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSkuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_sku\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverSkuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverSku slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverSku")
	}
	return rowsAff, nil
}

// Delete deletes a single ServerSku record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerSku) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerSku provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverSkuPrimaryKeyMapping)
	sql := "DELETE FROM \"server_sku\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_sku")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_sku")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverSkuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverSkuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_sku")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSkuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverSkuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_sku\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverSku slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku")
	}

	if len(serverSkuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerSku) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerSku(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSkuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSkuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_sku\".* FROM \"server_sku\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSkuSlice")
	}

	*o = slice

	return nil
}

// ServerSkuExists checks if the ServerSku row exists.
func ServerSkuExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_sku\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_sku exists")
	}

	return exists, nil
}

// Exists checks if the ServerSku row exists.
func (o *ServerSku) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ServerSkuExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerSku) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverSkuUpsertCacheMut.RLock()
	cache, cached := serverSkuUpsertCache[key]
	serverSkuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverSkuAllColumns,
			serverSkuColumnsWithDefault,
			serverSkuColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverSkuAllColumns,
			serverSkuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_sku, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverSkuPrimaryKeyColumns))
			copy(conflict, serverSkuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_sku\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverSkuType, serverSkuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverSkuType, serverSkuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_sku")
	}

	if !cached {
		serverSkuUpsertCacheMut.Lock()
		serverSkuUpsertCache[key] = cache
		serverSkuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
