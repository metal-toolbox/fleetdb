// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FirmwareSetValidationFact is an object representing the database table.
type FirmwareSetValidationFact struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirmwareSetID  string    `boil:"firmware_set_id" json:"firmware_set_id" toml:"firmware_set_id" yaml:"firmware_set_id"`
	TargetServerID string    `boil:"target_server_id" json:"target_server_id" toml:"target_server_id" yaml:"target_server_id"`
	PerformedOn    time.Time `boil:"performed_on" json:"performed_on" toml:"performed_on" yaml:"performed_on"`

	R *firmwareSetValidationFactR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L firmwareSetValidationFactL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FirmwareSetValidationFactColumns = struct {
	ID             string
	FirmwareSetID  string
	TargetServerID string
	PerformedOn    string
}{
	ID:             "id",
	FirmwareSetID:  "firmware_set_id",
	TargetServerID: "target_server_id",
	PerformedOn:    "performed_on",
}

var FirmwareSetValidationFactTableColumns = struct {
	ID             string
	FirmwareSetID  string
	TargetServerID string
	PerformedOn    string
}{
	ID:             "firmware_set_validation_facts.id",
	FirmwareSetID:  "firmware_set_validation_facts.firmware_set_id",
	TargetServerID: "firmware_set_validation_facts.target_server_id",
	PerformedOn:    "firmware_set_validation_facts.performed_on",
}

// Generated where

var FirmwareSetValidationFactWhere = struct {
	ID             whereHelperstring
	FirmwareSetID  whereHelperstring
	TargetServerID whereHelperstring
	PerformedOn    whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"firmware_set_validation_facts\".\"id\""},
	FirmwareSetID:  whereHelperstring{field: "\"firmware_set_validation_facts\".\"firmware_set_id\""},
	TargetServerID: whereHelperstring{field: "\"firmware_set_validation_facts\".\"target_server_id\""},
	PerformedOn:    whereHelpertime_Time{field: "\"firmware_set_validation_facts\".\"performed_on\""},
}

// FirmwareSetValidationFactRels is where relationship names are stored.
var FirmwareSetValidationFactRels = struct {
	FirmwareSet string
}{
	FirmwareSet: "FirmwareSet",
}

// firmwareSetValidationFactR is where relationships are stored.
type firmwareSetValidationFactR struct {
	FirmwareSet *ComponentFirmwareSet `boil:"FirmwareSet" json:"FirmwareSet" toml:"FirmwareSet" yaml:"FirmwareSet"`
}

// NewStruct creates a new relationship struct
func (*firmwareSetValidationFactR) NewStruct() *firmwareSetValidationFactR {
	return &firmwareSetValidationFactR{}
}

func (r *firmwareSetValidationFactR) GetFirmwareSet() *ComponentFirmwareSet {
	if r == nil {
		return nil
	}
	return r.FirmwareSet
}

// firmwareSetValidationFactL is where Load methods for each relationship are stored.
type firmwareSetValidationFactL struct{}

var (
	firmwareSetValidationFactAllColumns            = []string{"id", "firmware_set_id", "target_server_id", "performed_on"}
	firmwareSetValidationFactColumnsWithoutDefault = []string{"firmware_set_id", "target_server_id", "performed_on"}
	firmwareSetValidationFactColumnsWithDefault    = []string{"id"}
	firmwareSetValidationFactPrimaryKeyColumns     = []string{"id"}
	firmwareSetValidationFactGeneratedColumns      = []string{}
)

type (
	// FirmwareSetValidationFactSlice is an alias for a slice of pointers to FirmwareSetValidationFact.
	// This should almost always be used instead of []FirmwareSetValidationFact.
	FirmwareSetValidationFactSlice []*FirmwareSetValidationFact
	// FirmwareSetValidationFactHook is the signature for custom FirmwareSetValidationFact hook methods
	FirmwareSetValidationFactHook func(context.Context, boil.ContextExecutor, *FirmwareSetValidationFact) error

	firmwareSetValidationFactQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	firmwareSetValidationFactType                 = reflect.TypeOf(&FirmwareSetValidationFact{})
	firmwareSetValidationFactMapping              = queries.MakeStructMapping(firmwareSetValidationFactType)
	firmwareSetValidationFactPrimaryKeyMapping, _ = queries.BindMapping(firmwareSetValidationFactType, firmwareSetValidationFactMapping, firmwareSetValidationFactPrimaryKeyColumns)
	firmwareSetValidationFactInsertCacheMut       sync.RWMutex
	firmwareSetValidationFactInsertCache          = make(map[string]insertCache)
	firmwareSetValidationFactUpdateCacheMut       sync.RWMutex
	firmwareSetValidationFactUpdateCache          = make(map[string]updateCache)
	firmwareSetValidationFactUpsertCacheMut       sync.RWMutex
	firmwareSetValidationFactUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var firmwareSetValidationFactAfterSelectHooks []FirmwareSetValidationFactHook

var firmwareSetValidationFactBeforeInsertHooks []FirmwareSetValidationFactHook
var firmwareSetValidationFactAfterInsertHooks []FirmwareSetValidationFactHook

var firmwareSetValidationFactBeforeUpdateHooks []FirmwareSetValidationFactHook
var firmwareSetValidationFactAfterUpdateHooks []FirmwareSetValidationFactHook

var firmwareSetValidationFactBeforeDeleteHooks []FirmwareSetValidationFactHook
var firmwareSetValidationFactAfterDeleteHooks []FirmwareSetValidationFactHook

var firmwareSetValidationFactBeforeUpsertHooks []FirmwareSetValidationFactHook
var firmwareSetValidationFactAfterUpsertHooks []FirmwareSetValidationFactHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FirmwareSetValidationFact) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FirmwareSetValidationFact) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FirmwareSetValidationFact) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FirmwareSetValidationFact) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FirmwareSetValidationFact) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FirmwareSetValidationFact) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FirmwareSetValidationFact) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FirmwareSetValidationFact) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FirmwareSetValidationFact) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range firmwareSetValidationFactAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFirmwareSetValidationFactHook registers your hook function for all future operations.
func AddFirmwareSetValidationFactHook(hookPoint boil.HookPoint, firmwareSetValidationFactHook FirmwareSetValidationFactHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		firmwareSetValidationFactAfterSelectHooks = append(firmwareSetValidationFactAfterSelectHooks, firmwareSetValidationFactHook)
	case boil.BeforeInsertHook:
		firmwareSetValidationFactBeforeInsertHooks = append(firmwareSetValidationFactBeforeInsertHooks, firmwareSetValidationFactHook)
	case boil.AfterInsertHook:
		firmwareSetValidationFactAfterInsertHooks = append(firmwareSetValidationFactAfterInsertHooks, firmwareSetValidationFactHook)
	case boil.BeforeUpdateHook:
		firmwareSetValidationFactBeforeUpdateHooks = append(firmwareSetValidationFactBeforeUpdateHooks, firmwareSetValidationFactHook)
	case boil.AfterUpdateHook:
		firmwareSetValidationFactAfterUpdateHooks = append(firmwareSetValidationFactAfterUpdateHooks, firmwareSetValidationFactHook)
	case boil.BeforeDeleteHook:
		firmwareSetValidationFactBeforeDeleteHooks = append(firmwareSetValidationFactBeforeDeleteHooks, firmwareSetValidationFactHook)
	case boil.AfterDeleteHook:
		firmwareSetValidationFactAfterDeleteHooks = append(firmwareSetValidationFactAfterDeleteHooks, firmwareSetValidationFactHook)
	case boil.BeforeUpsertHook:
		firmwareSetValidationFactBeforeUpsertHooks = append(firmwareSetValidationFactBeforeUpsertHooks, firmwareSetValidationFactHook)
	case boil.AfterUpsertHook:
		firmwareSetValidationFactAfterUpsertHooks = append(firmwareSetValidationFactAfterUpsertHooks, firmwareSetValidationFactHook)
	}
}

// One returns a single firmwareSetValidationFact record from the query.
func (q firmwareSetValidationFactQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FirmwareSetValidationFact, error) {
	o := &FirmwareSetValidationFact{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for firmware_set_validation_facts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FirmwareSetValidationFact records from the query.
func (q firmwareSetValidationFactQuery) All(ctx context.Context, exec boil.ContextExecutor) (FirmwareSetValidationFactSlice, error) {
	var o []*FirmwareSetValidationFact

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FirmwareSetValidationFact slice")
	}

	if len(firmwareSetValidationFactAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FirmwareSetValidationFact records in the query.
func (q firmwareSetValidationFactQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count firmware_set_validation_facts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q firmwareSetValidationFactQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if firmware_set_validation_facts exists")
	}

	return count > 0, nil
}

// FirmwareSet pointed to by the foreign key.
func (o *FirmwareSetValidationFact) FirmwareSet(mods ...qm.QueryMod) componentFirmwareSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FirmwareSetID),
	}

	queryMods = append(queryMods, mods...)

	return ComponentFirmwareSets(queryMods...)
}

// LoadFirmwareSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (firmwareSetValidationFactL) LoadFirmwareSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFirmwareSetValidationFact interface{}, mods queries.Applicator) error {
	var slice []*FirmwareSetValidationFact
	var object *FirmwareSetValidationFact

	if singular {
		var ok bool
		object, ok = maybeFirmwareSetValidationFact.(*FirmwareSetValidationFact)
		if !ok {
			object = new(FirmwareSetValidationFact)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFirmwareSetValidationFact)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFirmwareSetValidationFact))
			}
		}
	} else {
		s, ok := maybeFirmwareSetValidationFact.(*[]*FirmwareSetValidationFact)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFirmwareSetValidationFact)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFirmwareSetValidationFact))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &firmwareSetValidationFactR{}
		}
		args = append(args, object.FirmwareSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &firmwareSetValidationFactR{}
			}

			for _, a := range args {
				if a == obj.FirmwareSetID {
					continue Outer
				}
			}

			args = append(args, obj.FirmwareSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`component_firmware_set`),
		qm.WhereIn(`component_firmware_set.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ComponentFirmwareSet")
	}

	var resultSlice []*ComponentFirmwareSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ComponentFirmwareSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for component_firmware_set")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for component_firmware_set")
	}

	if len(componentFirmwareSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FirmwareSet = foreign
		if foreign.R == nil {
			foreign.R = &componentFirmwareSetR{}
		}
		foreign.R.FirmwareSetFirmwareSetValidationFacts = append(foreign.R.FirmwareSetFirmwareSetValidationFacts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FirmwareSetID == foreign.ID {
				local.R.FirmwareSet = foreign
				if foreign.R == nil {
					foreign.R = &componentFirmwareSetR{}
				}
				foreign.R.FirmwareSetFirmwareSetValidationFacts = append(foreign.R.FirmwareSetFirmwareSetValidationFacts, local)
				break
			}
		}
	}

	return nil
}

// SetFirmwareSet of the firmwareSetValidationFact to the related item.
// Sets o.R.FirmwareSet to related.
// Adds o to related.R.FirmwareSetFirmwareSetValidationFacts.
func (o *FirmwareSetValidationFact) SetFirmwareSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ComponentFirmwareSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"firmware_set_validation_facts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"firmware_set_id"}),
		strmangle.WhereClause("\"", "\"", 2, firmwareSetValidationFactPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FirmwareSetID = related.ID
	if o.R == nil {
		o.R = &firmwareSetValidationFactR{
			FirmwareSet: related,
		}
	} else {
		o.R.FirmwareSet = related
	}

	if related.R == nil {
		related.R = &componentFirmwareSetR{
			FirmwareSetFirmwareSetValidationFacts: FirmwareSetValidationFactSlice{o},
		}
	} else {
		related.R.FirmwareSetFirmwareSetValidationFacts = append(related.R.FirmwareSetFirmwareSetValidationFacts, o)
	}

	return nil
}

// FirmwareSetValidationFacts retrieves all the records using an executor.
func FirmwareSetValidationFacts(mods ...qm.QueryMod) firmwareSetValidationFactQuery {
	mods = append(mods, qm.From("\"firmware_set_validation_facts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"firmware_set_validation_facts\".*"})
	}

	return firmwareSetValidationFactQuery{q}
}

// FindFirmwareSetValidationFact retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFirmwareSetValidationFact(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FirmwareSetValidationFact, error) {
	firmwareSetValidationFactObj := &FirmwareSetValidationFact{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"firmware_set_validation_facts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, firmwareSetValidationFactObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from firmware_set_validation_facts")
	}

	if err = firmwareSetValidationFactObj.doAfterSelectHooks(ctx, exec); err != nil {
		return firmwareSetValidationFactObj, err
	}

	return firmwareSetValidationFactObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FirmwareSetValidationFact) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no firmware_set_validation_facts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(firmwareSetValidationFactColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	firmwareSetValidationFactInsertCacheMut.RLock()
	cache, cached := firmwareSetValidationFactInsertCache[key]
	firmwareSetValidationFactInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			firmwareSetValidationFactAllColumns,
			firmwareSetValidationFactColumnsWithDefault,
			firmwareSetValidationFactColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(firmwareSetValidationFactType, firmwareSetValidationFactMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(firmwareSetValidationFactType, firmwareSetValidationFactMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"firmware_set_validation_facts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"firmware_set_validation_facts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into firmware_set_validation_facts")
	}

	if !cached {
		firmwareSetValidationFactInsertCacheMut.Lock()
		firmwareSetValidationFactInsertCache[key] = cache
		firmwareSetValidationFactInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FirmwareSetValidationFact.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FirmwareSetValidationFact) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	firmwareSetValidationFactUpdateCacheMut.RLock()
	cache, cached := firmwareSetValidationFactUpdateCache[key]
	firmwareSetValidationFactUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			firmwareSetValidationFactAllColumns,
			firmwareSetValidationFactPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update firmware_set_validation_facts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"firmware_set_validation_facts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, firmwareSetValidationFactPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(firmwareSetValidationFactType, firmwareSetValidationFactMapping, append(wl, firmwareSetValidationFactPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update firmware_set_validation_facts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for firmware_set_validation_facts")
	}

	if !cached {
		firmwareSetValidationFactUpdateCacheMut.Lock()
		firmwareSetValidationFactUpdateCache[key] = cache
		firmwareSetValidationFactUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q firmwareSetValidationFactQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for firmware_set_validation_facts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for firmware_set_validation_facts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FirmwareSetValidationFactSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), firmwareSetValidationFactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"firmware_set_validation_facts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, firmwareSetValidationFactPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in firmwareSetValidationFact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all firmwareSetValidationFact")
	}
	return rowsAff, nil
}

// Delete deletes a single FirmwareSetValidationFact record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FirmwareSetValidationFact) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FirmwareSetValidationFact provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), firmwareSetValidationFactPrimaryKeyMapping)
	sql := "DELETE FROM \"firmware_set_validation_facts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from firmware_set_validation_facts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for firmware_set_validation_facts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q firmwareSetValidationFactQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no firmwareSetValidationFactQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from firmware_set_validation_facts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for firmware_set_validation_facts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FirmwareSetValidationFactSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(firmwareSetValidationFactBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), firmwareSetValidationFactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"firmware_set_validation_facts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, firmwareSetValidationFactPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from firmwareSetValidationFact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for firmware_set_validation_facts")
	}

	if len(firmwareSetValidationFactAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FirmwareSetValidationFact) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFirmwareSetValidationFact(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FirmwareSetValidationFactSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FirmwareSetValidationFactSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), firmwareSetValidationFactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"firmware_set_validation_facts\".* FROM \"firmware_set_validation_facts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, firmwareSetValidationFactPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FirmwareSetValidationFactSlice")
	}

	*o = slice

	return nil
}

// FirmwareSetValidationFactExists checks if the FirmwareSetValidationFact row exists.
func FirmwareSetValidationFactExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"firmware_set_validation_facts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if firmware_set_validation_facts exists")
	}

	return exists, nil
}

// Exists checks if the FirmwareSetValidationFact row exists.
func (o *FirmwareSetValidationFact) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FirmwareSetValidationFactExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FirmwareSetValidationFact) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no firmware_set_validation_facts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(firmwareSetValidationFactColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	firmwareSetValidationFactUpsertCacheMut.RLock()
	cache, cached := firmwareSetValidationFactUpsertCache[key]
	firmwareSetValidationFactUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			firmwareSetValidationFactAllColumns,
			firmwareSetValidationFactColumnsWithDefault,
			firmwareSetValidationFactColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			firmwareSetValidationFactAllColumns,
			firmwareSetValidationFactPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert firmware_set_validation_facts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(firmwareSetValidationFactPrimaryKeyColumns))
			copy(conflict, firmwareSetValidationFactPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"firmware_set_validation_facts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(firmwareSetValidationFactType, firmwareSetValidationFactMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(firmwareSetValidationFactType, firmwareSetValidationFactMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert firmware_set_validation_facts")
	}

	if !cached {
		firmwareSetValidationFactUpsertCacheMut.Lock()
		firmwareSetValidationFactUpsertCache[key] = cache
		firmwareSetValidationFactUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
