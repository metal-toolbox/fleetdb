// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testServerCredentialsUpsert(t *testing.T) {
	t.Parallel()

	if len(serverCredentialAllColumns) == len(serverCredentialPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerCredential{}
	if err = randomize.Struct(seed, &o, serverCredentialDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerCredential: %s", err)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverCredentialDBTypes, false, serverCredentialPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerCredential: %s", err)
	}

	count, err = ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerCredentials(t *testing.T) {
	t.Parallel()

	query := ServerCredentials()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerCredentialsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerCredentialsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerCredentials().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerCredentialsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerCredentialSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerCredentialsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerCredentialExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerCredential exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerCredentialExists to return true, but got false.")
	}
}

func testServerCredentialsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverCredentialFound, err := FindServerCredential(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverCredentialFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerCredentialsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerCredentials().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerCredentialsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerCredentials().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerCredentialsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverCredentialOne := &ServerCredential{}
	serverCredentialTwo := &ServerCredential{}
	if err = randomize.Struct(seed, serverCredentialOne, serverCredentialDBTypes, false, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}
	if err = randomize.Struct(seed, serverCredentialTwo, serverCredentialDBTypes, false, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverCredentialOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverCredentialTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerCredentials().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerCredentialsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverCredentialOne := &ServerCredential{}
	serverCredentialTwo := &ServerCredential{}
	if err = randomize.Struct(seed, serverCredentialOne, serverCredentialDBTypes, false, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}
	if err = randomize.Struct(seed, serverCredentialTwo, serverCredentialDBTypes, false, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverCredentialOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverCredentialTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverCredentialBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func serverCredentialAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerCredential) error {
	*o = ServerCredential{}
	return nil
}

func testServerCredentialsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerCredential{}
	o := &ServerCredential{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerCredential object: %s", err)
	}

	AddServerCredentialHook(boil.BeforeInsertHook, serverCredentialBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverCredentialBeforeInsertHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.AfterInsertHook, serverCredentialAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverCredentialAfterInsertHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.AfterSelectHook, serverCredentialAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverCredentialAfterSelectHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.BeforeUpdateHook, serverCredentialBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverCredentialBeforeUpdateHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.AfterUpdateHook, serverCredentialAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverCredentialAfterUpdateHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.BeforeDeleteHook, serverCredentialBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverCredentialBeforeDeleteHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.AfterDeleteHook, serverCredentialAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverCredentialAfterDeleteHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.BeforeUpsertHook, serverCredentialBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverCredentialBeforeUpsertHooks = []ServerCredentialHook{}

	AddServerCredentialHook(boil.AfterUpsertHook, serverCredentialAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverCredentialAfterUpsertHooks = []ServerCredentialHook{}
}

func testServerCredentialsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerCredentialsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverCredentialColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerCredentialToOneServerCredentialTypeUsingServerCredentialType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerCredential
	var foreign ServerCredentialType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverCredentialDBTypes, false, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverCredentialTypeDBTypes, false, serverCredentialTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredentialType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerCredentialTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ServerCredentialType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerCredentialSlice{&local}
	if err = local.L.LoadServerCredentialType(ctx, tx, false, (*[]*ServerCredential)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerCredentialType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ServerCredentialType = nil
	if err = local.L.LoadServerCredentialType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ServerCredentialType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerCredentialToOneServerUsingServer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerCredential
	var foreign Server

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverCredentialDBTypes, false, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverDBTypes, false, serverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Server struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ServerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Server().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ServerCredentialSlice{&local}
	if err = local.L.LoadServer(ctx, tx, false, (*[]*ServerCredential)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Server = nil
	if err = local.L.LoadServer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Server == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testServerCredentialToOneSetOpServerCredentialTypeUsingServerCredentialType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerCredential
	var b, c ServerCredentialType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverCredentialDBTypes, false, strmangle.SetComplement(serverCredentialPrimaryKeyColumns, serverCredentialColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverCredentialTypeDBTypes, false, strmangle.SetComplement(serverCredentialTypePrimaryKeyColumns, serverCredentialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverCredentialTypeDBTypes, false, strmangle.SetComplement(serverCredentialTypePrimaryKeyColumns, serverCredentialTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerCredentialType{&b, &c} {
		err = a.SetServerCredentialType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ServerCredentialType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerCredentials[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerCredentialTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerCredentialTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerCredentialTypeID))
		reflect.Indirect(reflect.ValueOf(&a.ServerCredentialTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerCredentialTypeID != x.ID {
			t.Error("foreign key was wrong value", a.ServerCredentialTypeID, x.ID)
		}
	}
}
func testServerCredentialToOneSetOpServerUsingServer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerCredential
	var b, c Server

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverCredentialDBTypes, false, strmangle.SetComplement(serverCredentialPrimaryKeyColumns, serverCredentialColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverDBTypes, false, strmangle.SetComplement(serverPrimaryKeyColumns, serverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Server{&b, &c} {
		err = a.SetServer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Server != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ServerCredentials[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ServerID))
		reflect.Indirect(reflect.ValueOf(&a.ServerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ServerID != x.ID {
			t.Error("foreign key was wrong value", a.ServerID, x.ID)
		}
	}
}

func testServerCredentialsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerCredentialsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerCredentialSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerCredentialsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerCredentials().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverCredentialDBTypes = map[string]string{`ID`: `uuid`, `ServerID`: `uuid`, `ServerCredentialTypeID`: `uuid`, `Password`: `string`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`, `Username`: `string`}
	_                       = bytes.MinRead
)

func testServerCredentialsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverCredentialPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverCredentialAllColumns) == len(serverCredentialPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerCredentialsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverCredentialAllColumns) == len(serverCredentialPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerCredential{}
	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerCredentials().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverCredentialDBTypes, true, serverCredentialPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerCredential struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverCredentialAllColumns, serverCredentialPrimaryKeyColumns) {
		fields = serverCredentialAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverCredentialAllColumns,
			serverCredentialPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerCredentialSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
