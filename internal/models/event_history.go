// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EventHistory is an object representing the database table.
type EventHistory struct {
	EventID      string    `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	EventType    string    `boil:"event_type" json:"event_type" toml:"event_type" yaml:"event_type"`
	EventStart   time.Time `boil:"event_start" json:"event_start" toml:"event_start" yaml:"event_start"`
	EventEnd     time.Time `boil:"event_end" json:"event_end" toml:"event_end" yaml:"event_end"`
	TargetServer string    `boil:"target_server" json:"target_server" toml:"target_server" yaml:"target_server"`
	Parameters   null.JSON `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`
	FinalState   string    `boil:"final_state" json:"final_state" toml:"final_state" yaml:"final_state"`
	FinalStatus  null.JSON `boil:"final_status" json:"final_status,omitempty" toml:"final_status" yaml:"final_status,omitempty"`

	R *eventHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventHistoryColumns = struct {
	EventID      string
	EventType    string
	EventStart   string
	EventEnd     string
	TargetServer string
	Parameters   string
	FinalState   string
	FinalStatus  string
}{
	EventID:      "event_id",
	EventType:    "event_type",
	EventStart:   "event_start",
	EventEnd:     "event_end",
	TargetServer: "target_server",
	Parameters:   "parameters",
	FinalState:   "final_state",
	FinalStatus:  "final_status",
}

var EventHistoryTableColumns = struct {
	EventID      string
	EventType    string
	EventStart   string
	EventEnd     string
	TargetServer string
	Parameters   string
	FinalState   string
	FinalStatus  string
}{
	EventID:      "event_history.event_id",
	EventType:    "event_history.event_type",
	EventStart:   "event_history.event_start",
	EventEnd:     "event_history.event_end",
	TargetServer: "event_history.target_server",
	Parameters:   "event_history.parameters",
	FinalState:   "event_history.final_state",
	FinalStatus:  "event_history.final_status",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EventHistoryWhere = struct {
	EventID      whereHelperstring
	EventType    whereHelperstring
	EventStart   whereHelpertime_Time
	EventEnd     whereHelpertime_Time
	TargetServer whereHelperstring
	Parameters   whereHelpernull_JSON
	FinalState   whereHelperstring
	FinalStatus  whereHelpernull_JSON
}{
	EventID:      whereHelperstring{field: "\"event_history\".\"event_id\""},
	EventType:    whereHelperstring{field: "\"event_history\".\"event_type\""},
	EventStart:   whereHelpertime_Time{field: "\"event_history\".\"event_start\""},
	EventEnd:     whereHelpertime_Time{field: "\"event_history\".\"event_end\""},
	TargetServer: whereHelperstring{field: "\"event_history\".\"target_server\""},
	Parameters:   whereHelpernull_JSON{field: "\"event_history\".\"parameters\""},
	FinalState:   whereHelperstring{field: "\"event_history\".\"final_state\""},
	FinalStatus:  whereHelpernull_JSON{field: "\"event_history\".\"final_status\""},
}

// EventHistoryRels is where relationship names are stored.
var EventHistoryRels = struct {
	TargetServerServer string
}{
	TargetServerServer: "TargetServerServer",
}

// eventHistoryR is where relationships are stored.
type eventHistoryR struct {
	TargetServerServer *Server `boil:"TargetServerServer" json:"TargetServerServer" toml:"TargetServerServer" yaml:"TargetServerServer"`
}

// NewStruct creates a new relationship struct
func (*eventHistoryR) NewStruct() *eventHistoryR {
	return &eventHistoryR{}
}

func (r *eventHistoryR) GetTargetServerServer() *Server {
	if r == nil {
		return nil
	}
	return r.TargetServerServer
}

// eventHistoryL is where Load methods for each relationship are stored.
type eventHistoryL struct{}

var (
	eventHistoryAllColumns            = []string{"event_id", "event_type", "event_start", "event_end", "target_server", "parameters", "final_state", "final_status"}
	eventHistoryColumnsWithoutDefault = []string{"event_id", "event_type", "event_start", "event_end", "target_server", "final_state"}
	eventHistoryColumnsWithDefault    = []string{"parameters", "final_status"}
	eventHistoryPrimaryKeyColumns     = []string{"event_id", "event_type", "target_server"}
	eventHistoryGeneratedColumns      = []string{}
)

type (
	// EventHistorySlice is an alias for a slice of pointers to EventHistory.
	// This should almost always be used instead of []EventHistory.
	EventHistorySlice []*EventHistory
	// EventHistoryHook is the signature for custom EventHistory hook methods
	EventHistoryHook func(context.Context, boil.ContextExecutor, *EventHistory) error

	eventHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventHistoryType                 = reflect.TypeOf(&EventHistory{})
	eventHistoryMapping              = queries.MakeStructMapping(eventHistoryType)
	eventHistoryPrimaryKeyMapping, _ = queries.BindMapping(eventHistoryType, eventHistoryMapping, eventHistoryPrimaryKeyColumns)
	eventHistoryInsertCacheMut       sync.RWMutex
	eventHistoryInsertCache          = make(map[string]insertCache)
	eventHistoryUpdateCacheMut       sync.RWMutex
	eventHistoryUpdateCache          = make(map[string]updateCache)
	eventHistoryUpsertCacheMut       sync.RWMutex
	eventHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventHistoryAfterSelectHooks []EventHistoryHook

var eventHistoryBeforeInsertHooks []EventHistoryHook
var eventHistoryAfterInsertHooks []EventHistoryHook

var eventHistoryBeforeUpdateHooks []EventHistoryHook
var eventHistoryAfterUpdateHooks []EventHistoryHook

var eventHistoryBeforeDeleteHooks []EventHistoryHook
var eventHistoryAfterDeleteHooks []EventHistoryHook

var eventHistoryBeforeUpsertHooks []EventHistoryHook
var eventHistoryAfterUpsertHooks []EventHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventHistoryHook registers your hook function for all future operations.
func AddEventHistoryHook(hookPoint boil.HookPoint, eventHistoryHook EventHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventHistoryAfterSelectHooks = append(eventHistoryAfterSelectHooks, eventHistoryHook)
	case boil.BeforeInsertHook:
		eventHistoryBeforeInsertHooks = append(eventHistoryBeforeInsertHooks, eventHistoryHook)
	case boil.AfterInsertHook:
		eventHistoryAfterInsertHooks = append(eventHistoryAfterInsertHooks, eventHistoryHook)
	case boil.BeforeUpdateHook:
		eventHistoryBeforeUpdateHooks = append(eventHistoryBeforeUpdateHooks, eventHistoryHook)
	case boil.AfterUpdateHook:
		eventHistoryAfterUpdateHooks = append(eventHistoryAfterUpdateHooks, eventHistoryHook)
	case boil.BeforeDeleteHook:
		eventHistoryBeforeDeleteHooks = append(eventHistoryBeforeDeleteHooks, eventHistoryHook)
	case boil.AfterDeleteHook:
		eventHistoryAfterDeleteHooks = append(eventHistoryAfterDeleteHooks, eventHistoryHook)
	case boil.BeforeUpsertHook:
		eventHistoryBeforeUpsertHooks = append(eventHistoryBeforeUpsertHooks, eventHistoryHook)
	case boil.AfterUpsertHook:
		eventHistoryAfterUpsertHooks = append(eventHistoryAfterUpsertHooks, eventHistoryHook)
	}
}

// One returns a single eventHistory record from the query.
func (q eventHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventHistory, error) {
	o := &EventHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventHistory records from the query.
func (q eventHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventHistorySlice, error) {
	var o []*EventHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventHistory slice")
	}

	if len(eventHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventHistory records in the query.
func (q eventHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_history exists")
	}

	return count > 0, nil
}

// TargetServerServer pointed to by the foreign key.
func (o *EventHistory) TargetServerServer(mods ...qm.QueryMod) serverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TargetServer),
	}

	queryMods = append(queryMods, mods...)

	return Servers(queryMods...)
}

// LoadTargetServerServer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventHistoryL) LoadTargetServerServer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventHistory interface{}, mods queries.Applicator) error {
	var slice []*EventHistory
	var object *EventHistory

	if singular {
		var ok bool
		object, ok = maybeEventHistory.(*EventHistory)
		if !ok {
			object = new(EventHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventHistory))
			}
		}
	} else {
		s, ok := maybeEventHistory.(*[]*EventHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventHistoryR{}
		}
		args = append(args, object.TargetServer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventHistoryR{}
			}

			for _, a := range args {
				if a == obj.TargetServer {
					continue Outer
				}
			}

			args = append(args, obj.TargetServer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`servers`),
		qm.WhereIn(`servers.id in ?`, args...),
		qmhelper.WhereIsNull(`servers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Server")
	}

	var resultSlice []*Server
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Server")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for servers")
	}

	if len(serverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetServerServer = foreign
		if foreign.R == nil {
			foreign.R = &serverR{}
		}
		foreign.R.TargetServerEventHistories = append(foreign.R.TargetServerEventHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TargetServer == foreign.ID {
				local.R.TargetServerServer = foreign
				if foreign.R == nil {
					foreign.R = &serverR{}
				}
				foreign.R.TargetServerEventHistories = append(foreign.R.TargetServerEventHistories, local)
				break
			}
		}
	}

	return nil
}

// SetTargetServerServer of the eventHistory to the related item.
// Sets o.R.TargetServerServer to related.
// Adds o to related.R.TargetServerEventHistories.
func (o *EventHistory) SetTargetServerServer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Server) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"target_server"}),
		strmangle.WhereClause("\"", "\"", 2, eventHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.EventID, o.EventType, o.TargetServer}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TargetServer = related.ID
	if o.R == nil {
		o.R = &eventHistoryR{
			TargetServerServer: related,
		}
	} else {
		o.R.TargetServerServer = related
	}

	if related.R == nil {
		related.R = &serverR{
			TargetServerEventHistories: EventHistorySlice{o},
		}
	} else {
		related.R.TargetServerEventHistories = append(related.R.TargetServerEventHistories, o)
	}

	return nil
}

// EventHistories retrieves all the records using an executor.
func EventHistories(mods ...qm.QueryMod) eventHistoryQuery {
	mods = append(mods, qm.From("\"event_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"event_history\".*"})
	}

	return eventHistoryQuery{q}
}

// FindEventHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventHistory(ctx context.Context, exec boil.ContextExecutor, eventID string, eventType string, targetServer string, selectCols ...string) (*EventHistory, error) {
	eventHistoryObj := &EventHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_history\" where \"event_id\"=$1 AND \"event_type\"=$2 AND \"target_server\"=$3", sel,
	)

	q := queries.Raw(query, eventID, eventType, targetServer)

	err := q.Bind(ctx, exec, eventHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_history")
	}

	if err = eventHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventHistoryObj, err
	}

	return eventHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventHistoryInsertCacheMut.RLock()
	cache, cached := eventHistoryInsertCache[key]
	eventHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventHistoryAllColumns,
			eventHistoryColumnsWithDefault,
			eventHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventHistoryType, eventHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventHistoryType, eventHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_history")
	}

	if !cached {
		eventHistoryInsertCacheMut.Lock()
		eventHistoryInsertCache[key] = cache
		eventHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EventHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventHistoryUpdateCacheMut.RLock()
	cache, cached := eventHistoryUpdateCache[key]
	eventHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventHistoryAllColumns,
			eventHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventHistoryType, eventHistoryMapping, append(wl, eventHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_history")
	}

	if !cached {
		eventHistoryUpdateCacheMut.Lock()
		eventHistoryUpdateCache[key] = cache
		eventHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventHistory")
	}
	return rowsAff, nil
}

// Delete deletes a single EventHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"event_history\" WHERE \"event_id\"=$1 AND \"event_type\"=$2 AND \"target_server\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_history")
	}

	if len(eventHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventHistory(ctx, exec, o.EventID, o.EventType, o.TargetServer)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_history\".* FROM \"event_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventHistorySlice")
	}

	*o = slice

	return nil
}

// EventHistoryExists checks if the EventHistory row exists.
func EventHistoryExists(ctx context.Context, exec boil.ContextExecutor, eventID string, eventType string, targetServer string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_history\" where \"event_id\"=$1 AND \"event_type\"=$2 AND \"target_server\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, eventID, eventType, targetServer)
	}
	row := exec.QueryRowContext(ctx, sql, eventID, eventType, targetServer)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_history exists")
	}

	return exists, nil
}

// Exists checks if the EventHistory row exists.
func (o *EventHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventHistoryExists(ctx, exec, o.EventID, o.EventType, o.TargetServer)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventHistoryUpsertCacheMut.RLock()
	cache, cached := eventHistoryUpsertCache[key]
	eventHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			eventHistoryAllColumns,
			eventHistoryColumnsWithDefault,
			eventHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			eventHistoryAllColumns,
			eventHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert event_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(eventHistoryPrimaryKeyColumns))
			copy(conflict, eventHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"event_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(eventHistoryType, eventHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventHistoryType, eventHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert event_history")
	}

	if !cached {
		eventHistoryUpsertCacheMut.Lock()
		eventHistoryUpsertCache[key] = cache
		eventHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
