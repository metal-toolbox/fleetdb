// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServerSkuNic is an object representing the database table.
type ServerSkuNic struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	SkuID         string    `boil:"sku_id" json:"sku_id" toml:"sku_id" yaml:"sku_id"`
	PortBandwidth int64     `boil:"port_bandwidth" json:"port_bandwidth" toml:"port_bandwidth" yaml:"port_bandwidth"`
	PortCount     int64     `boil:"port_count" json:"port_count" toml:"port_count" yaml:"port_count"`
	Count         int64     `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *serverSkuNicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverSkuNicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerSkuNicColumns = struct {
	ID            string
	SkuID         string
	PortBandwidth string
	PortCount     string
	Count         string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	SkuID:         "sku_id",
	PortBandwidth: "port_bandwidth",
	PortCount:     "port_count",
	Count:         "count",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var ServerSkuNicTableColumns = struct {
	ID            string
	SkuID         string
	PortBandwidth string
	PortCount     string
	Count         string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "server_sku_nic.id",
	SkuID:         "server_sku_nic.sku_id",
	PortBandwidth: "server_sku_nic.port_bandwidth",
	PortCount:     "server_sku_nic.port_count",
	Count:         "server_sku_nic.count",
	CreatedAt:     "server_sku_nic.created_at",
	UpdatedAt:     "server_sku_nic.updated_at",
}

// Generated where

var ServerSkuNicWhere = struct {
	ID            whereHelperstring
	SkuID         whereHelperstring
	PortBandwidth whereHelperint64
	PortCount     whereHelperint64
	Count         whereHelperint64
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"server_sku_nic\".\"id\""},
	SkuID:         whereHelperstring{field: "\"server_sku_nic\".\"sku_id\""},
	PortBandwidth: whereHelperint64{field: "\"server_sku_nic\".\"port_bandwidth\""},
	PortCount:     whereHelperint64{field: "\"server_sku_nic\".\"port_count\""},
	Count:         whereHelperint64{field: "\"server_sku_nic\".\"count\""},
	CreatedAt:     whereHelpernull_Time{field: "\"server_sku_nic\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"server_sku_nic\".\"updated_at\""},
}

// ServerSkuNicRels is where relationship names are stored.
var ServerSkuNicRels = struct {
	Sku string
}{
	Sku: "Sku",
}

// serverSkuNicR is where relationships are stored.
type serverSkuNicR struct {
	Sku *ServerSku `boil:"Sku" json:"Sku" toml:"Sku" yaml:"Sku"`
}

// NewStruct creates a new relationship struct
func (*serverSkuNicR) NewStruct() *serverSkuNicR {
	return &serverSkuNicR{}
}

func (r *serverSkuNicR) GetSku() *ServerSku {
	if r == nil {
		return nil
	}
	return r.Sku
}

// serverSkuNicL is where Load methods for each relationship are stored.
type serverSkuNicL struct{}

var (
	serverSkuNicAllColumns            = []string{"id", "sku_id", "port_bandwidth", "port_count", "count", "created_at", "updated_at"}
	serverSkuNicColumnsWithoutDefault = []string{"sku_id", "port_bandwidth", "port_count", "count"}
	serverSkuNicColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	serverSkuNicPrimaryKeyColumns     = []string{"id"}
	serverSkuNicGeneratedColumns      = []string{}
)

type (
	// ServerSkuNicSlice is an alias for a slice of pointers to ServerSkuNic.
	// This should almost always be used instead of []ServerSkuNic.
	ServerSkuNicSlice []*ServerSkuNic
	// ServerSkuNicHook is the signature for custom ServerSkuNic hook methods
	ServerSkuNicHook func(context.Context, boil.ContextExecutor, *ServerSkuNic) error

	serverSkuNicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverSkuNicType                 = reflect.TypeOf(&ServerSkuNic{})
	serverSkuNicMapping              = queries.MakeStructMapping(serverSkuNicType)
	serverSkuNicPrimaryKeyMapping, _ = queries.BindMapping(serverSkuNicType, serverSkuNicMapping, serverSkuNicPrimaryKeyColumns)
	serverSkuNicInsertCacheMut       sync.RWMutex
	serverSkuNicInsertCache          = make(map[string]insertCache)
	serverSkuNicUpdateCacheMut       sync.RWMutex
	serverSkuNicUpdateCache          = make(map[string]updateCache)
	serverSkuNicUpsertCacheMut       sync.RWMutex
	serverSkuNicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverSkuNicAfterSelectHooks []ServerSkuNicHook

var serverSkuNicBeforeInsertHooks []ServerSkuNicHook
var serverSkuNicAfterInsertHooks []ServerSkuNicHook

var serverSkuNicBeforeUpdateHooks []ServerSkuNicHook
var serverSkuNicAfterUpdateHooks []ServerSkuNicHook

var serverSkuNicBeforeDeleteHooks []ServerSkuNicHook
var serverSkuNicAfterDeleteHooks []ServerSkuNicHook

var serverSkuNicBeforeUpsertHooks []ServerSkuNicHook
var serverSkuNicAfterUpsertHooks []ServerSkuNicHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerSkuNic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerSkuNic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerSkuNic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerSkuNic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerSkuNic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerSkuNic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerSkuNic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerSkuNic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerSkuNic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuNicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerSkuNicHook registers your hook function for all future operations.
func AddServerSkuNicHook(hookPoint boil.HookPoint, serverSkuNicHook ServerSkuNicHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		serverSkuNicAfterSelectHooks = append(serverSkuNicAfterSelectHooks, serverSkuNicHook)
	case boil.BeforeInsertHook:
		serverSkuNicBeforeInsertHooks = append(serverSkuNicBeforeInsertHooks, serverSkuNicHook)
	case boil.AfterInsertHook:
		serverSkuNicAfterInsertHooks = append(serverSkuNicAfterInsertHooks, serverSkuNicHook)
	case boil.BeforeUpdateHook:
		serverSkuNicBeforeUpdateHooks = append(serverSkuNicBeforeUpdateHooks, serverSkuNicHook)
	case boil.AfterUpdateHook:
		serverSkuNicAfterUpdateHooks = append(serverSkuNicAfterUpdateHooks, serverSkuNicHook)
	case boil.BeforeDeleteHook:
		serverSkuNicBeforeDeleteHooks = append(serverSkuNicBeforeDeleteHooks, serverSkuNicHook)
	case boil.AfterDeleteHook:
		serverSkuNicAfterDeleteHooks = append(serverSkuNicAfterDeleteHooks, serverSkuNicHook)
	case boil.BeforeUpsertHook:
		serverSkuNicBeforeUpsertHooks = append(serverSkuNicBeforeUpsertHooks, serverSkuNicHook)
	case boil.AfterUpsertHook:
		serverSkuNicAfterUpsertHooks = append(serverSkuNicAfterUpsertHooks, serverSkuNicHook)
	}
}

// One returns a single serverSkuNic record from the query.
func (q serverSkuNicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerSkuNic, error) {
	o := &ServerSkuNic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_sku_nic")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerSkuNic records from the query.
func (q serverSkuNicQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSkuNicSlice, error) {
	var o []*ServerSkuNic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerSkuNic slice")
	}

	if len(serverSkuNicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerSkuNic records in the query.
func (q serverSkuNicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_sku_nic rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverSkuNicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_sku_nic exists")
	}

	return count > 0, nil
}

// Sku pointed to by the foreign key.
func (o *ServerSkuNic) Sku(mods ...qm.QueryMod) serverSkuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	return ServerSkus(queryMods...)
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverSkuNicL) LoadSku(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSkuNic interface{}, mods queries.Applicator) error {
	var slice []*ServerSkuNic
	var object *ServerSkuNic

	if singular {
		var ok bool
		object, ok = maybeServerSkuNic.(*ServerSkuNic)
		if !ok {
			object = new(ServerSkuNic)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSkuNic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSkuNic))
			}
		}
	} else {
		s, ok := maybeServerSkuNic.(*[]*ServerSkuNic)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSkuNic)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSkuNic))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuNicR{}
		}
		args = append(args, object.SkuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuNicR{}
			}

			for _, a := range args {
				if a == obj.SkuID {
					continue Outer
				}
			}

			args = append(args, obj.SkuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku`),
		qm.WhereIn(`server_sku.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerSku")
	}

	var resultSlice []*ServerSku
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerSku")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_sku")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku")
	}

	if len(serverSkuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &serverSkuR{}
		}
		foreign.R.SkuServerSkuNics = append(foreign.R.SkuServerSkuNics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkuID == foreign.ID {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &serverSkuR{}
				}
				foreign.R.SkuServerSkuNics = append(foreign.R.SkuServerSkuNics, local)
				break
			}
		}
	}

	return nil
}

// SetSku of the serverSkuNic to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuServerSkuNics.
func (o *ServerSkuNic) SetSku(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerSku) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_sku_nic\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverSkuNicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkuID = related.ID
	if o.R == nil {
		o.R = &serverSkuNicR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &serverSkuR{
			SkuServerSkuNics: ServerSkuNicSlice{o},
		}
	} else {
		related.R.SkuServerSkuNics = append(related.R.SkuServerSkuNics, o)
	}

	return nil
}

// ServerSkuNics retrieves all the records using an executor.
func ServerSkuNics(mods ...qm.QueryMod) serverSkuNicQuery {
	mods = append(mods, qm.From("\"server_sku_nic\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"server_sku_nic\".*"})
	}

	return serverSkuNicQuery{q}
}

// FindServerSkuNic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerSkuNic(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerSkuNic, error) {
	serverSkuNicObj := &ServerSkuNic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_sku_nic\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverSkuNicObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_sku_nic")
	}

	if err = serverSkuNicObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverSkuNicObj, err
	}

	return serverSkuNicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerSkuNic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku_nic provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuNicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverSkuNicInsertCacheMut.RLock()
	cache, cached := serverSkuNicInsertCache[key]
	serverSkuNicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverSkuNicAllColumns,
			serverSkuNicColumnsWithDefault,
			serverSkuNicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverSkuNicType, serverSkuNicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverSkuNicType, serverSkuNicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_sku_nic\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_sku_nic\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_sku_nic")
	}

	if !cached {
		serverSkuNicInsertCacheMut.Lock()
		serverSkuNicInsertCache[key] = cache
		serverSkuNicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerSkuNic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerSkuNic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverSkuNicUpdateCacheMut.RLock()
	cache, cached := serverSkuNicUpdateCache[key]
	serverSkuNicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverSkuNicAllColumns,
			serverSkuNicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_sku_nic, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_sku_nic\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverSkuNicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverSkuNicType, serverSkuNicMapping, append(wl, serverSkuNicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_sku_nic row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_sku_nic")
	}

	if !cached {
		serverSkuNicUpdateCacheMut.Lock()
		serverSkuNicUpdateCache[key] = cache
		serverSkuNicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverSkuNicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_sku_nic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_sku_nic")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSkuNicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuNicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_sku_nic\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverSkuNicPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverSkuNic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverSkuNic")
	}
	return rowsAff, nil
}

// Delete deletes a single ServerSkuNic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerSkuNic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerSkuNic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverSkuNicPrimaryKeyMapping)
	sql := "DELETE FROM \"server_sku_nic\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_sku_nic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_sku_nic")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverSkuNicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverSkuNicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_sku_nic")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku_nic")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSkuNicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverSkuNicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuNicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_sku_nic\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuNicPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverSkuNic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku_nic")
	}

	if len(serverSkuNicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerSkuNic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerSkuNic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSkuNicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSkuNicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuNicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_sku_nic\".* FROM \"server_sku_nic\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuNicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSkuNicSlice")
	}

	*o = slice

	return nil
}

// ServerSkuNicExists checks if the ServerSkuNic row exists.
func ServerSkuNicExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_sku_nic\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_sku_nic exists")
	}

	return exists, nil
}

// Exists checks if the ServerSkuNic row exists.
func (o *ServerSkuNic) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ServerSkuNicExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerSkuNic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku_nic provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuNicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverSkuNicUpsertCacheMut.RLock()
	cache, cached := serverSkuNicUpsertCache[key]
	serverSkuNicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverSkuNicAllColumns,
			serverSkuNicColumnsWithDefault,
			serverSkuNicColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverSkuNicAllColumns,
			serverSkuNicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_sku_nic, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverSkuNicPrimaryKeyColumns))
			copy(conflict, serverSkuNicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_sku_nic\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverSkuNicType, serverSkuNicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverSkuNicType, serverSkuNicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_sku_nic")
	}

	if !cached {
		serverSkuNicUpsertCacheMut.Lock()
		serverSkuNicUpsertCache[key] = cache
		serverSkuNicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
