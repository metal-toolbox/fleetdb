// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConfigComponent is an object representing the database table.
type ConfigComponent struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FKConfigSetID string    `boil:"fk_config_set_id" json:"fk_config_set_id" toml:"fk_config_set_id" yaml:"fk_config_set_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Vendor        string    `boil:"vendor" json:"vendor" toml:"vendor" yaml:"vendor"`
	Model         string    `boil:"model" json:"model" toml:"model" yaml:"model"`
	Serial        string    `boil:"serial" json:"serial" toml:"serial" yaml:"serial"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *configComponentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configComponentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigComponentColumns = struct {
	ID            string
	FKConfigSetID string
	Name          string
	Vendor        string
	Model         string
	Serial        string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	FKConfigSetID: "fk_config_set_id",
	Name:          "name",
	Vendor:        "vendor",
	Model:         "model",
	Serial:        "serial",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var ConfigComponentTableColumns = struct {
	ID            string
	FKConfigSetID string
	Name          string
	Vendor        string
	Model         string
	Serial        string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "config_components.id",
	FKConfigSetID: "config_components.fk_config_set_id",
	Name:          "config_components.name",
	Vendor:        "config_components.vendor",
	Model:         "config_components.model",
	Serial:        "config_components.serial",
	CreatedAt:     "config_components.created_at",
	UpdatedAt:     "config_components.updated_at",
}

// Generated where

var ConfigComponentWhere = struct {
	ID            whereHelperstring
	FKConfigSetID whereHelperstring
	Name          whereHelperstring
	Vendor        whereHelperstring
	Model         whereHelperstring
	Serial        whereHelperstring
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"config_components\".\"id\""},
	FKConfigSetID: whereHelperstring{field: "\"config_components\".\"fk_config_set_id\""},
	Name:          whereHelperstring{field: "\"config_components\".\"name\""},
	Vendor:        whereHelperstring{field: "\"config_components\".\"vendor\""},
	Model:         whereHelperstring{field: "\"config_components\".\"model\""},
	Serial:        whereHelperstring{field: "\"config_components\".\"serial\""},
	CreatedAt:     whereHelpernull_Time{field: "\"config_components\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"config_components\".\"updated_at\""},
}

// ConfigComponentRels is where relationship names are stored.
var ConfigComponentRels = struct {
	FKConfigSet                        string
	FKComponentConfigComponentSettings string
}{
	FKConfigSet:                        "FKConfigSet",
	FKComponentConfigComponentSettings: "FKComponentConfigComponentSettings",
}

// configComponentR is where relationships are stored.
type configComponentR struct {
	FKConfigSet                        *ConfigSet                  `boil:"FKConfigSet" json:"FKConfigSet" toml:"FKConfigSet" yaml:"FKConfigSet"`
	FKComponentConfigComponentSettings ConfigComponentSettingSlice `boil:"FKComponentConfigComponentSettings" json:"FKComponentConfigComponentSettings" toml:"FKComponentConfigComponentSettings" yaml:"FKComponentConfigComponentSettings"`
}

// NewStruct creates a new relationship struct
func (*configComponentR) NewStruct() *configComponentR {
	return &configComponentR{}
}

func (r *configComponentR) GetFKConfigSet() *ConfigSet {
	if r == nil {
		return nil
	}
	return r.FKConfigSet
}

func (r *configComponentR) GetFKComponentConfigComponentSettings() ConfigComponentSettingSlice {
	if r == nil {
		return nil
	}
	return r.FKComponentConfigComponentSettings
}

// configComponentL is where Load methods for each relationship are stored.
type configComponentL struct{}

var (
	configComponentAllColumns            = []string{"id", "fk_config_set_id", "name", "vendor", "model", "serial", "created_at", "updated_at"}
	configComponentColumnsWithoutDefault = []string{"fk_config_set_id", "name", "vendor", "model", "serial"}
	configComponentColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	configComponentPrimaryKeyColumns     = []string{"id"}
	configComponentGeneratedColumns      = []string{}
)

type (
	// ConfigComponentSlice is an alias for a slice of pointers to ConfigComponent.
	// This should almost always be used instead of []ConfigComponent.
	ConfigComponentSlice []*ConfigComponent
	// ConfigComponentHook is the signature for custom ConfigComponent hook methods
	ConfigComponentHook func(context.Context, boil.ContextExecutor, *ConfigComponent) error

	configComponentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configComponentType                 = reflect.TypeOf(&ConfigComponent{})
	configComponentMapping              = queries.MakeStructMapping(configComponentType)
	configComponentPrimaryKeyMapping, _ = queries.BindMapping(configComponentType, configComponentMapping, configComponentPrimaryKeyColumns)
	configComponentInsertCacheMut       sync.RWMutex
	configComponentInsertCache          = make(map[string]insertCache)
	configComponentUpdateCacheMut       sync.RWMutex
	configComponentUpdateCache          = make(map[string]updateCache)
	configComponentUpsertCacheMut       sync.RWMutex
	configComponentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configComponentAfterSelectHooks []ConfigComponentHook

var configComponentBeforeInsertHooks []ConfigComponentHook
var configComponentAfterInsertHooks []ConfigComponentHook

var configComponentBeforeUpdateHooks []ConfigComponentHook
var configComponentAfterUpdateHooks []ConfigComponentHook

var configComponentBeforeDeleteHooks []ConfigComponentHook
var configComponentAfterDeleteHooks []ConfigComponentHook

var configComponentBeforeUpsertHooks []ConfigComponentHook
var configComponentAfterUpsertHooks []ConfigComponentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConfigComponent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConfigComponent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConfigComponent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConfigComponent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConfigComponent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConfigComponent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConfigComponent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConfigComponent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConfigComponent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configComponentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigComponentHook registers your hook function for all future operations.
func AddConfigComponentHook(hookPoint boil.HookPoint, configComponentHook ConfigComponentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		configComponentAfterSelectHooks = append(configComponentAfterSelectHooks, configComponentHook)
	case boil.BeforeInsertHook:
		configComponentBeforeInsertHooks = append(configComponentBeforeInsertHooks, configComponentHook)
	case boil.AfterInsertHook:
		configComponentAfterInsertHooks = append(configComponentAfterInsertHooks, configComponentHook)
	case boil.BeforeUpdateHook:
		configComponentBeforeUpdateHooks = append(configComponentBeforeUpdateHooks, configComponentHook)
	case boil.AfterUpdateHook:
		configComponentAfterUpdateHooks = append(configComponentAfterUpdateHooks, configComponentHook)
	case boil.BeforeDeleteHook:
		configComponentBeforeDeleteHooks = append(configComponentBeforeDeleteHooks, configComponentHook)
	case boil.AfterDeleteHook:
		configComponentAfterDeleteHooks = append(configComponentAfterDeleteHooks, configComponentHook)
	case boil.BeforeUpsertHook:
		configComponentBeforeUpsertHooks = append(configComponentBeforeUpsertHooks, configComponentHook)
	case boil.AfterUpsertHook:
		configComponentAfterUpsertHooks = append(configComponentAfterUpsertHooks, configComponentHook)
	}
}

// One returns a single configComponent record from the query.
func (q configComponentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ConfigComponent, error) {
	o := &ConfigComponent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config_components")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ConfigComponent records from the query.
func (q configComponentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfigComponentSlice, error) {
	var o []*ConfigComponent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ConfigComponent slice")
	}

	if len(configComponentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ConfigComponent records in the query.
func (q configComponentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config_components rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q configComponentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config_components exists")
	}

	return count > 0, nil
}

// FKConfigSet pointed to by the foreign key.
func (o *ConfigComponent) FKConfigSet(mods ...qm.QueryMod) configSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FKConfigSetID),
	}

	queryMods = append(queryMods, mods...)

	return ConfigSets(queryMods...)
}

// FKComponentConfigComponentSettings retrieves all the config_component_setting's ConfigComponentSettings with an executor via fk_component_id column.
func (o *ConfigComponent) FKComponentConfigComponentSettings(mods ...qm.QueryMod) configComponentSettingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"config_component_settings\".\"fk_component_id\"=?", o.ID),
	)

	return ConfigComponentSettings(queryMods...)
}

// LoadFKConfigSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configComponentL) LoadFKConfigSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfigComponent interface{}, mods queries.Applicator) error {
	var slice []*ConfigComponent
	var object *ConfigComponent

	if singular {
		var ok bool
		object, ok = maybeConfigComponent.(*ConfigComponent)
		if !ok {
			object = new(ConfigComponent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeConfigComponent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeConfigComponent))
			}
		}
	} else {
		s, ok := maybeConfigComponent.(*[]*ConfigComponent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeConfigComponent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeConfigComponent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configComponentR{}
		}
		args = append(args, object.FKConfigSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configComponentR{}
			}

			for _, a := range args {
				if a == obj.FKConfigSetID {
					continue Outer
				}
			}

			args = append(args, obj.FKConfigSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_sets`),
		qm.WhereIn(`config_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ConfigSet")
	}

	var resultSlice []*ConfigSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ConfigSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_sets")
	}

	if len(configSetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FKConfigSet = foreign
		if foreign.R == nil {
			foreign.R = &configSetR{}
		}
		foreign.R.FKConfigSetConfigComponents = append(foreign.R.FKConfigSetConfigComponents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FKConfigSetID == foreign.ID {
				local.R.FKConfigSet = foreign
				if foreign.R == nil {
					foreign.R = &configSetR{}
				}
				foreign.R.FKConfigSetConfigComponents = append(foreign.R.FKConfigSetConfigComponents, local)
				break
			}
		}
	}

	return nil
}

// LoadFKComponentConfigComponentSettings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configComponentL) LoadFKComponentConfigComponentSettings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfigComponent interface{}, mods queries.Applicator) error {
	var slice []*ConfigComponent
	var object *ConfigComponent

	if singular {
		var ok bool
		object, ok = maybeConfigComponent.(*ConfigComponent)
		if !ok {
			object = new(ConfigComponent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeConfigComponent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeConfigComponent))
			}
		}
	} else {
		s, ok := maybeConfigComponent.(*[]*ConfigComponent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeConfigComponent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeConfigComponent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configComponentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configComponentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config_component_settings`),
		qm.WhereIn(`config_component_settings.fk_component_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load config_component_settings")
	}

	var resultSlice []*ConfigComponentSetting
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice config_component_settings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on config_component_settings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config_component_settings")
	}

	if len(configComponentSettingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FKComponentConfigComponentSettings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configComponentSettingR{}
			}
			foreign.R.FKComponent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FKComponentID {
				local.R.FKComponentConfigComponentSettings = append(local.R.FKComponentConfigComponentSettings, foreign)
				if foreign.R == nil {
					foreign.R = &configComponentSettingR{}
				}
				foreign.R.FKComponent = local
				break
			}
		}
	}

	return nil
}

// SetFKConfigSet of the configComponent to the related item.
// Sets o.R.FKConfigSet to related.
// Adds o to related.R.FKConfigSetConfigComponents.
func (o *ConfigComponent) SetFKConfigSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ConfigSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"config_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fk_config_set_id"}),
		strmangle.WhereClause("\"", "\"", 2, configComponentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FKConfigSetID = related.ID
	if o.R == nil {
		o.R = &configComponentR{
			FKConfigSet: related,
		}
	} else {
		o.R.FKConfigSet = related
	}

	if related.R == nil {
		related.R = &configSetR{
			FKConfigSetConfigComponents: ConfigComponentSlice{o},
		}
	} else {
		related.R.FKConfigSetConfigComponents = append(related.R.FKConfigSetConfigComponents, o)
	}

	return nil
}

// AddFKComponentConfigComponentSettings adds the given related objects to the existing relationships
// of the config_component, optionally inserting them as new records.
// Appends related to o.R.FKComponentConfigComponentSettings.
// Sets related.R.FKComponent appropriately.
func (o *ConfigComponent) AddFKComponentConfigComponentSettings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ConfigComponentSetting) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FKComponentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"config_component_settings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fk_component_id"}),
				strmangle.WhereClause("\"", "\"", 2, configComponentSettingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FKComponentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configComponentR{
			FKComponentConfigComponentSettings: related,
		}
	} else {
		o.R.FKComponentConfigComponentSettings = append(o.R.FKComponentConfigComponentSettings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configComponentSettingR{
				FKComponent: o,
			}
		} else {
			rel.R.FKComponent = o
		}
	}
	return nil
}

// ConfigComponents retrieves all the records using an executor.
func ConfigComponents(mods ...qm.QueryMod) configComponentQuery {
	mods = append(mods, qm.From("\"config_components\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"config_components\".*"})
	}

	return configComponentQuery{q}
}

// FindConfigComponent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfigComponent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ConfigComponent, error) {
	configComponentObj := &ConfigComponent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config_components\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, configComponentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config_components")
	}

	if err = configComponentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return configComponentObj, err
	}

	return configComponentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConfigComponent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_components provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configComponentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configComponentInsertCacheMut.RLock()
	cache, cached := configComponentInsertCache[key]
	configComponentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configComponentAllColumns,
			configComponentColumnsWithDefault,
			configComponentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configComponentType, configComponentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configComponentType, configComponentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config_components\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config_components\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config_components")
	}

	if !cached {
		configComponentInsertCacheMut.Lock()
		configComponentInsertCache[key] = cache
		configComponentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ConfigComponent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConfigComponent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configComponentUpdateCacheMut.RLock()
	cache, cached := configComponentUpdateCache[key]
	configComponentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configComponentAllColumns,
			configComponentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config_components, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config_components\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configComponentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configComponentType, configComponentMapping, append(wl, configComponentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config_components row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config_components")
	}

	if !cached {
		configComponentUpdateCacheMut.Lock()
		configComponentUpdateCache[key] = cache
		configComponentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q configComponentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config_components")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigComponentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config_components\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configComponentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in configComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all configComponent")
	}
	return rowsAff, nil
}

// Delete deletes a single ConfigComponent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConfigComponent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ConfigComponent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configComponentPrimaryKeyMapping)
	sql := "DELETE FROM \"config_components\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config_components")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q configComponentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configComponentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config_components")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_components")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigComponentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configComponentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configComponentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from configComponent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config_components")
	}

	if len(configComponentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConfigComponent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfigComponent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigComponentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigComponentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configComponentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config_components\".* FROM \"config_components\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configComponentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigComponentSlice")
	}

	*o = slice

	return nil
}

// ConfigComponentExists checks if the ConfigComponent row exists.
func ConfigComponentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config_components\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config_components exists")
	}

	return exists, nil
}

// Exists checks if the ConfigComponent row exists.
func (o *ConfigComponent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ConfigComponentExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConfigComponent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config_components provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configComponentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configComponentUpsertCacheMut.RLock()
	cache, cached := configComponentUpsertCache[key]
	configComponentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configComponentAllColumns,
			configComponentColumnsWithDefault,
			configComponentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configComponentAllColumns,
			configComponentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert config_components, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configComponentPrimaryKeyColumns))
			copy(conflict, configComponentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"config_components\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configComponentType, configComponentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configComponentType, configComponentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert config_components")
	}

	if !cached {
		configComponentUpsertCacheMut.Lock()
		configComponentUpsertCache[key] = cache
		configComponentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
