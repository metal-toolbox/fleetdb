// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testFirmwareSetValidationFactsUpsert(t *testing.T) {
	t.Parallel()

	if len(firmwareSetValidationFactAllColumns) == len(firmwareSetValidationFactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, &o, firmwareSetValidationFactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FirmwareSetValidationFact: %s", err)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, firmwareSetValidationFactDBTypes, false, firmwareSetValidationFactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FirmwareSetValidationFact: %s", err)
	}

	count, err = FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFirmwareSetValidationFacts(t *testing.T) {
	t.Parallel()

	query := FirmwareSetValidationFacts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFirmwareSetValidationFactsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFirmwareSetValidationFactsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FirmwareSetValidationFacts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFirmwareSetValidationFactsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FirmwareSetValidationFactSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFirmwareSetValidationFactsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FirmwareSetValidationFactExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FirmwareSetValidationFact exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FirmwareSetValidationFactExists to return true, but got false.")
	}
}

func testFirmwareSetValidationFactsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	firmwareSetValidationFactFound, err := FindFirmwareSetValidationFact(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if firmwareSetValidationFactFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFirmwareSetValidationFactsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FirmwareSetValidationFacts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFirmwareSetValidationFactsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FirmwareSetValidationFacts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFirmwareSetValidationFactsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	firmwareSetValidationFactOne := &FirmwareSetValidationFact{}
	firmwareSetValidationFactTwo := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, firmwareSetValidationFactOne, firmwareSetValidationFactDBTypes, false, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}
	if err = randomize.Struct(seed, firmwareSetValidationFactTwo, firmwareSetValidationFactDBTypes, false, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = firmwareSetValidationFactOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = firmwareSetValidationFactTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FirmwareSetValidationFacts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFirmwareSetValidationFactsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	firmwareSetValidationFactOne := &FirmwareSetValidationFact{}
	firmwareSetValidationFactTwo := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, firmwareSetValidationFactOne, firmwareSetValidationFactDBTypes, false, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}
	if err = randomize.Struct(seed, firmwareSetValidationFactTwo, firmwareSetValidationFactDBTypes, false, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = firmwareSetValidationFactOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = firmwareSetValidationFactTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func firmwareSetValidationFactBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func firmwareSetValidationFactAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FirmwareSetValidationFact) error {
	*o = FirmwareSetValidationFact{}
	return nil
}

func testFirmwareSetValidationFactsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FirmwareSetValidationFact{}
	o := &FirmwareSetValidationFact{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact object: %s", err)
	}

	AddFirmwareSetValidationFactHook(boil.BeforeInsertHook, firmwareSetValidationFactBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactBeforeInsertHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.AfterInsertHook, firmwareSetValidationFactAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactAfterInsertHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.AfterSelectHook, firmwareSetValidationFactAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactAfterSelectHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.BeforeUpdateHook, firmwareSetValidationFactBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactBeforeUpdateHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.AfterUpdateHook, firmwareSetValidationFactAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactAfterUpdateHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.BeforeDeleteHook, firmwareSetValidationFactBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactBeforeDeleteHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.AfterDeleteHook, firmwareSetValidationFactAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactAfterDeleteHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.BeforeUpsertHook, firmwareSetValidationFactBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactBeforeUpsertHooks = []FirmwareSetValidationFactHook{}

	AddFirmwareSetValidationFactHook(boil.AfterUpsertHook, firmwareSetValidationFactAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	firmwareSetValidationFactAfterUpsertHooks = []FirmwareSetValidationFactHook{}
}

func testFirmwareSetValidationFactsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFirmwareSetValidationFactsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(firmwareSetValidationFactColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFirmwareSetValidationFactToOneComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FirmwareSetValidationFact
	var foreign ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, firmwareSetValidationFactDBTypes, false, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, componentFirmwareSetDBTypes, false, componentFirmwareSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ComponentFirmwareSet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FirmwareSetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FirmwareSet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddComponentFirmwareSetHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ComponentFirmwareSet) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FirmwareSetValidationFactSlice{&local}
	if err = local.L.LoadFirmwareSet(ctx, tx, false, (*[]*FirmwareSetValidationFact)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FirmwareSet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FirmwareSet = nil
	if err = local.L.LoadFirmwareSet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FirmwareSet == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFirmwareSetValidationFactToOneSetOpComponentFirmwareSetUsingFirmwareSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FirmwareSetValidationFact
	var b, c ComponentFirmwareSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, firmwareSetValidationFactDBTypes, false, strmangle.SetComplement(firmwareSetValidationFactPrimaryKeyColumns, firmwareSetValidationFactColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, componentFirmwareSetDBTypes, false, strmangle.SetComplement(componentFirmwareSetPrimaryKeyColumns, componentFirmwareSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ComponentFirmwareSet{&b, &c} {
		err = a.SetFirmwareSet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FirmwareSet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FirmwareSetFirmwareSetValidationFacts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FirmwareSetID != x.ID {
			t.Error("foreign key was wrong value", a.FirmwareSetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FirmwareSetID))
		reflect.Indirect(reflect.ValueOf(&a.FirmwareSetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FirmwareSetID != x.ID {
			t.Error("foreign key was wrong value", a.FirmwareSetID, x.ID)
		}
	}
}

func testFirmwareSetValidationFactsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFirmwareSetValidationFactsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FirmwareSetValidationFactSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFirmwareSetValidationFactsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FirmwareSetValidationFacts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	firmwareSetValidationFactDBTypes = map[string]string{`ID`: `uuid`, `FirmwareSetID`: `uuid`, `TargetServerID`: `uuid`, `PerformedOn`: `timestamptz`}
	_                                = bytes.MinRead
)

func testFirmwareSetValidationFactsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(firmwareSetValidationFactPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(firmwareSetValidationFactAllColumns) == len(firmwareSetValidationFactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFirmwareSetValidationFactsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(firmwareSetValidationFactAllColumns) == len(firmwareSetValidationFactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FirmwareSetValidationFact{}
	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FirmwareSetValidationFacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, firmwareSetValidationFactDBTypes, true, firmwareSetValidationFactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FirmwareSetValidationFact struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(firmwareSetValidationFactAllColumns, firmwareSetValidationFactPrimaryKeyColumns) {
		fields = firmwareSetValidationFactAllColumns
	} else {
		fields = strmangle.SetComplement(
			firmwareSetValidationFactAllColumns,
			firmwareSetValidationFactPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FirmwareSetValidationFactSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
