// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AocMacAddress is an object representing the database table.
type AocMacAddress struct {
	AocMacAddress string `boil:"aoc_mac_address" json:"aoc_mac_address" toml:"aoc_mac_address" yaml:"aoc_mac_address"`
	SerialNum     string `boil:"serial_num" json:"serial_num" toml:"serial_num" yaml:"serial_num"`

	R *aocMacAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aocMacAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AocMacAddressColumns = struct {
	AocMacAddress string
	SerialNum     string
}{
	AocMacAddress: "aoc_mac_address",
	SerialNum:     "serial_num",
}

var AocMacAddressTableColumns = struct {
	AocMacAddress string
	SerialNum     string
}{
	AocMacAddress: "aoc_mac_address.aoc_mac_address",
	SerialNum:     "aoc_mac_address.serial_num",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AocMacAddressWhere = struct {
	AocMacAddress whereHelperstring
	SerialNum     whereHelperstring
}{
	AocMacAddress: whereHelperstring{field: "\"aoc_mac_address\".\"aoc_mac_address\""},
	SerialNum:     whereHelperstring{field: "\"aoc_mac_address\".\"serial_num\""},
}

// AocMacAddressRels is where relationship names are stored.
var AocMacAddressRels = struct {
	SerialNumBomInfo string
}{
	SerialNumBomInfo: "SerialNumBomInfo",
}

// aocMacAddressR is where relationships are stored.
type aocMacAddressR struct {
	SerialNumBomInfo *BomInfo `boil:"SerialNumBomInfo" json:"SerialNumBomInfo" toml:"SerialNumBomInfo" yaml:"SerialNumBomInfo"`
}

// NewStruct creates a new relationship struct
func (*aocMacAddressR) NewStruct() *aocMacAddressR {
	return &aocMacAddressR{}
}

func (r *aocMacAddressR) GetSerialNumBomInfo() *BomInfo {
	if r == nil {
		return nil
	}
	return r.SerialNumBomInfo
}

// aocMacAddressL is where Load methods for each relationship are stored.
type aocMacAddressL struct{}

var (
	aocMacAddressAllColumns            = []string{"aoc_mac_address", "serial_num"}
	aocMacAddressColumnsWithoutDefault = []string{"aoc_mac_address", "serial_num"}
	aocMacAddressColumnsWithDefault    = []string{}
	aocMacAddressPrimaryKeyColumns     = []string{"aoc_mac_address"}
	aocMacAddressGeneratedColumns      = []string{}
)

type (
	// AocMacAddressSlice is an alias for a slice of pointers to AocMacAddress.
	// This should almost always be used instead of []AocMacAddress.
	AocMacAddressSlice []*AocMacAddress
	// AocMacAddressHook is the signature for custom AocMacAddress hook methods
	AocMacAddressHook func(context.Context, boil.ContextExecutor, *AocMacAddress) error

	aocMacAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aocMacAddressType                 = reflect.TypeOf(&AocMacAddress{})
	aocMacAddressMapping              = queries.MakeStructMapping(aocMacAddressType)
	aocMacAddressPrimaryKeyMapping, _ = queries.BindMapping(aocMacAddressType, aocMacAddressMapping, aocMacAddressPrimaryKeyColumns)
	aocMacAddressInsertCacheMut       sync.RWMutex
	aocMacAddressInsertCache          = make(map[string]insertCache)
	aocMacAddressUpdateCacheMut       sync.RWMutex
	aocMacAddressUpdateCache          = make(map[string]updateCache)
	aocMacAddressUpsertCacheMut       sync.RWMutex
	aocMacAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aocMacAddressAfterSelectHooks []AocMacAddressHook

var aocMacAddressBeforeInsertHooks []AocMacAddressHook
var aocMacAddressAfterInsertHooks []AocMacAddressHook

var aocMacAddressBeforeUpdateHooks []AocMacAddressHook
var aocMacAddressAfterUpdateHooks []AocMacAddressHook

var aocMacAddressBeforeDeleteHooks []AocMacAddressHook
var aocMacAddressAfterDeleteHooks []AocMacAddressHook

var aocMacAddressBeforeUpsertHooks []AocMacAddressHook
var aocMacAddressAfterUpsertHooks []AocMacAddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AocMacAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AocMacAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AocMacAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AocMacAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AocMacAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AocMacAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AocMacAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AocMacAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AocMacAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aocMacAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAocMacAddressHook registers your hook function for all future operations.
func AddAocMacAddressHook(hookPoint boil.HookPoint, aocMacAddressHook AocMacAddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aocMacAddressAfterSelectHooks = append(aocMacAddressAfterSelectHooks, aocMacAddressHook)
	case boil.BeforeInsertHook:
		aocMacAddressBeforeInsertHooks = append(aocMacAddressBeforeInsertHooks, aocMacAddressHook)
	case boil.AfterInsertHook:
		aocMacAddressAfterInsertHooks = append(aocMacAddressAfterInsertHooks, aocMacAddressHook)
	case boil.BeforeUpdateHook:
		aocMacAddressBeforeUpdateHooks = append(aocMacAddressBeforeUpdateHooks, aocMacAddressHook)
	case boil.AfterUpdateHook:
		aocMacAddressAfterUpdateHooks = append(aocMacAddressAfterUpdateHooks, aocMacAddressHook)
	case boil.BeforeDeleteHook:
		aocMacAddressBeforeDeleteHooks = append(aocMacAddressBeforeDeleteHooks, aocMacAddressHook)
	case boil.AfterDeleteHook:
		aocMacAddressAfterDeleteHooks = append(aocMacAddressAfterDeleteHooks, aocMacAddressHook)
	case boil.BeforeUpsertHook:
		aocMacAddressBeforeUpsertHooks = append(aocMacAddressBeforeUpsertHooks, aocMacAddressHook)
	case boil.AfterUpsertHook:
		aocMacAddressAfterUpsertHooks = append(aocMacAddressAfterUpsertHooks, aocMacAddressHook)
	}
}

// One returns a single aocMacAddress record from the query.
func (q aocMacAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AocMacAddress, error) {
	o := &AocMacAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for aoc_mac_address")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AocMacAddress records from the query.
func (q aocMacAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (AocMacAddressSlice, error) {
	var o []*AocMacAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AocMacAddress slice")
	}

	if len(aocMacAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AocMacAddress records in the query.
func (q aocMacAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count aoc_mac_address rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aocMacAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if aoc_mac_address exists")
	}

	return count > 0, nil
}

// SerialNumBomInfo pointed to by the foreign key.
func (o *AocMacAddress) SerialNumBomInfo(mods ...qm.QueryMod) bomInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"serial_num\" = ?", o.SerialNum),
	}

	queryMods = append(queryMods, mods...)

	return BomInfos(queryMods...)
}

// LoadSerialNumBomInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aocMacAddressL) LoadSerialNumBomInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAocMacAddress interface{}, mods queries.Applicator) error {
	var slice []*AocMacAddress
	var object *AocMacAddress

	if singular {
		object = maybeAocMacAddress.(*AocMacAddress)
	} else {
		slice = *maybeAocMacAddress.(*[]*AocMacAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aocMacAddressR{}
		}
		args = append(args, object.SerialNum)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aocMacAddressR{}
			}

			for _, a := range args {
				if a == obj.SerialNum {
					continue Outer
				}
			}

			args = append(args, obj.SerialNum)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bom_info`),
		qm.WhereIn(`bom_info.serial_num in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BomInfo")
	}

	var resultSlice []*BomInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BomInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bom_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bom_info")
	}

	if len(aocMacAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SerialNumBomInfo = foreign
		if foreign.R == nil {
			foreign.R = &bomInfoR{}
		}
		foreign.R.SerialNumAocMacAddresses = append(foreign.R.SerialNumAocMacAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SerialNum == foreign.SerialNum {
				local.R.SerialNumBomInfo = foreign
				if foreign.R == nil {
					foreign.R = &bomInfoR{}
				}
				foreign.R.SerialNumAocMacAddresses = append(foreign.R.SerialNumAocMacAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetSerialNumBomInfo of the aocMacAddress to the related item.
// Sets o.R.SerialNumBomInfo to related.
// Adds o to related.R.SerialNumAocMacAddresses.
func (o *AocMacAddress) SetSerialNumBomInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BomInfo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"aoc_mac_address\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"serial_num"}),
		strmangle.WhereClause("\"", "\"", 2, aocMacAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.SerialNum, o.AocMacAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SerialNum = related.SerialNum
	if o.R == nil {
		o.R = &aocMacAddressR{
			SerialNumBomInfo: related,
		}
	} else {
		o.R.SerialNumBomInfo = related
	}

	if related.R == nil {
		related.R = &bomInfoR{
			SerialNumAocMacAddresses: AocMacAddressSlice{o},
		}
	} else {
		related.R.SerialNumAocMacAddresses = append(related.R.SerialNumAocMacAddresses, o)
	}

	return nil
}

// AocMacAddresses retrieves all the records using an executor.
func AocMacAddresses(mods ...qm.QueryMod) aocMacAddressQuery {
	mods = append(mods, qm.From("\"aoc_mac_address\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"aoc_mac_address\".*"})
	}

	return aocMacAddressQuery{q}
}

// FindAocMacAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAocMacAddress(ctx context.Context, exec boil.ContextExecutor, aocMacAddress string, selectCols ...string) (*AocMacAddress, error) {
	aocMacAddressObj := &AocMacAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"aoc_mac_address\" where \"aoc_mac_address\"=$1", sel,
	)

	q := queries.Raw(query, aocMacAddress)

	err := q.Bind(ctx, exec, aocMacAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from aoc_mac_address")
	}

	if err = aocMacAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aocMacAddressObj, err
	}

	return aocMacAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AocMacAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aoc_mac_address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aocMacAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aocMacAddressInsertCacheMut.RLock()
	cache, cached := aocMacAddressInsertCache[key]
	aocMacAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aocMacAddressAllColumns,
			aocMacAddressColumnsWithDefault,
			aocMacAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aocMacAddressType, aocMacAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aocMacAddressType, aocMacAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"aoc_mac_address\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"aoc_mac_address\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into aoc_mac_address")
	}

	if !cached {
		aocMacAddressInsertCacheMut.Lock()
		aocMacAddressInsertCache[key] = cache
		aocMacAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AocMacAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AocMacAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aocMacAddressUpdateCacheMut.RLock()
	cache, cached := aocMacAddressUpdateCache[key]
	aocMacAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aocMacAddressAllColumns,
			aocMacAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update aoc_mac_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"aoc_mac_address\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aocMacAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aocMacAddressType, aocMacAddressMapping, append(wl, aocMacAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update aoc_mac_address row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for aoc_mac_address")
	}

	if !cached {
		aocMacAddressUpdateCacheMut.Lock()
		aocMacAddressUpdateCache[key] = cache
		aocMacAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aocMacAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for aoc_mac_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for aoc_mac_address")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AocMacAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aocMacAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"aoc_mac_address\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aocMacAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aocMacAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aocMacAddress")
	}
	return rowsAff, nil
}

// Delete deletes a single AocMacAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AocMacAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AocMacAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aocMacAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"aoc_mac_address\" WHERE \"aoc_mac_address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from aoc_mac_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for aoc_mac_address")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aocMacAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aocMacAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aoc_mac_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aoc_mac_address")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AocMacAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aocMacAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aocMacAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"aoc_mac_address\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aocMacAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aocMacAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aoc_mac_address")
	}

	if len(aocMacAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AocMacAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAocMacAddress(ctx, exec, o.AocMacAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AocMacAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AocMacAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aocMacAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"aoc_mac_address\".* FROM \"aoc_mac_address\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aocMacAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AocMacAddressSlice")
	}

	*o = slice

	return nil
}

// AocMacAddressExists checks if the AocMacAddress row exists.
func AocMacAddressExists(ctx context.Context, exec boil.ContextExecutor, aocMacAddress string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"aoc_mac_address\" where \"aoc_mac_address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, aocMacAddress)
	}
	row := exec.QueryRowContext(ctx, sql, aocMacAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if aoc_mac_address exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AocMacAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aoc_mac_address provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aocMacAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aocMacAddressUpsertCacheMut.RLock()
	cache, cached := aocMacAddressUpsertCache[key]
	aocMacAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aocMacAddressAllColumns,
			aocMacAddressColumnsWithDefault,
			aocMacAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			aocMacAddressAllColumns,
			aocMacAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert aoc_mac_address, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(aocMacAddressPrimaryKeyColumns))
			copy(conflict, aocMacAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"aoc_mac_address\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(aocMacAddressType, aocMacAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aocMacAddressType, aocMacAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert aoc_mac_address")
	}

	if !cached {
		aocMacAddressUpsertCacheMut.Lock()
		aocMacAddressUpsertCache[key] = cache
		aocMacAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
