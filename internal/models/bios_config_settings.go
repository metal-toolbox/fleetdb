// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BiosConfigSetting is an object representing the database table.
type BiosConfigSetting struct {
	ID                      string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FKBiosConfigComponentID string    `boil:"fk_bios_config_component_id" json:"fk_bios_config_component_id" toml:"fk_bios_config_component_id" yaml:"fk_bios_config_component_id"`
	SettingsKey             string    `boil:"settings_key" json:"settings_key" toml:"settings_key" yaml:"settings_key"`
	SettingsValue           string    `boil:"settings_value" json:"settings_value" toml:"settings_value" yaml:"settings_value"`
	Raw                     null.JSON `boil:"raw" json:"raw,omitempty" toml:"raw" yaml:"raw,omitempty"`
	CreatedAt               null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt               null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *biosConfigSettingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L biosConfigSettingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BiosConfigSettingColumns = struct {
	ID                      string
	FKBiosConfigComponentID string
	SettingsKey             string
	SettingsValue           string
	Raw                     string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "id",
	FKBiosConfigComponentID: "fk_bios_config_component_id",
	SettingsKey:             "settings_key",
	SettingsValue:           "settings_value",
	Raw:                     "raw",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
}

var BiosConfigSettingTableColumns = struct {
	ID                      string
	FKBiosConfigComponentID string
	SettingsKey             string
	SettingsValue           string
	Raw                     string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "bios_config_settings.id",
	FKBiosConfigComponentID: "bios_config_settings.fk_bios_config_component_id",
	SettingsKey:             "bios_config_settings.settings_key",
	SettingsValue:           "bios_config_settings.settings_value",
	Raw:                     "bios_config_settings.raw",
	CreatedAt:               "bios_config_settings.created_at",
	UpdatedAt:               "bios_config_settings.updated_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BiosConfigSettingWhere = struct {
	ID                      whereHelperstring
	FKBiosConfigComponentID whereHelperstring
	SettingsKey             whereHelperstring
	SettingsValue           whereHelperstring
	Raw                     whereHelpernull_JSON
	CreatedAt               whereHelpernull_Time
	UpdatedAt               whereHelpernull_Time
}{
	ID:                      whereHelperstring{field: "\"bios_config_settings\".\"id\""},
	FKBiosConfigComponentID: whereHelperstring{field: "\"bios_config_settings\".\"fk_bios_config_component_id\""},
	SettingsKey:             whereHelperstring{field: "\"bios_config_settings\".\"settings_key\""},
	SettingsValue:           whereHelperstring{field: "\"bios_config_settings\".\"settings_value\""},
	Raw:                     whereHelpernull_JSON{field: "\"bios_config_settings\".\"raw\""},
	CreatedAt:               whereHelpernull_Time{field: "\"bios_config_settings\".\"created_at\""},
	UpdatedAt:               whereHelpernull_Time{field: "\"bios_config_settings\".\"updated_at\""},
}

// BiosConfigSettingRels is where relationship names are stored.
var BiosConfigSettingRels = struct {
	FKBiosConfigComponent string
}{
	FKBiosConfigComponent: "FKBiosConfigComponent",
}

// biosConfigSettingR is where relationships are stored.
type biosConfigSettingR struct {
	FKBiosConfigComponent *BiosConfigComponent `boil:"FKBiosConfigComponent" json:"FKBiosConfigComponent" toml:"FKBiosConfigComponent" yaml:"FKBiosConfigComponent"`
}

// NewStruct creates a new relationship struct
func (*biosConfigSettingR) NewStruct() *biosConfigSettingR {
	return &biosConfigSettingR{}
}

func (r *biosConfigSettingR) GetFKBiosConfigComponent() *BiosConfigComponent {
	if r == nil {
		return nil
	}
	return r.FKBiosConfigComponent
}

// biosConfigSettingL is where Load methods for each relationship are stored.
type biosConfigSettingL struct{}

var (
	biosConfigSettingAllColumns            = []string{"id", "fk_bios_config_component_id", "settings_key", "settings_value", "raw", "created_at", "updated_at"}
	biosConfigSettingColumnsWithoutDefault = []string{"fk_bios_config_component_id", "settings_key", "settings_value"}
	biosConfigSettingColumnsWithDefault    = []string{"id", "raw", "created_at", "updated_at"}
	biosConfigSettingPrimaryKeyColumns     = []string{"id"}
	biosConfigSettingGeneratedColumns      = []string{}
)

type (
	// BiosConfigSettingSlice is an alias for a slice of pointers to BiosConfigSetting.
	// This should almost always be used instead of []BiosConfigSetting.
	BiosConfigSettingSlice []*BiosConfigSetting
	// BiosConfigSettingHook is the signature for custom BiosConfigSetting hook methods
	BiosConfigSettingHook func(context.Context, boil.ContextExecutor, *BiosConfigSetting) error

	biosConfigSettingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	biosConfigSettingType                 = reflect.TypeOf(&BiosConfigSetting{})
	biosConfigSettingMapping              = queries.MakeStructMapping(biosConfigSettingType)
	biosConfigSettingPrimaryKeyMapping, _ = queries.BindMapping(biosConfigSettingType, biosConfigSettingMapping, biosConfigSettingPrimaryKeyColumns)
	biosConfigSettingInsertCacheMut       sync.RWMutex
	biosConfigSettingInsertCache          = make(map[string]insertCache)
	biosConfigSettingUpdateCacheMut       sync.RWMutex
	biosConfigSettingUpdateCache          = make(map[string]updateCache)
	biosConfigSettingUpsertCacheMut       sync.RWMutex
	biosConfigSettingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var biosConfigSettingAfterSelectHooks []BiosConfigSettingHook

var biosConfigSettingBeforeInsertHooks []BiosConfigSettingHook
var biosConfigSettingAfterInsertHooks []BiosConfigSettingHook

var biosConfigSettingBeforeUpdateHooks []BiosConfigSettingHook
var biosConfigSettingAfterUpdateHooks []BiosConfigSettingHook

var biosConfigSettingBeforeDeleteHooks []BiosConfigSettingHook
var biosConfigSettingAfterDeleteHooks []BiosConfigSettingHook

var biosConfigSettingBeforeUpsertHooks []BiosConfigSettingHook
var biosConfigSettingAfterUpsertHooks []BiosConfigSettingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BiosConfigSetting) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BiosConfigSetting) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BiosConfigSetting) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BiosConfigSetting) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BiosConfigSetting) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BiosConfigSetting) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BiosConfigSetting) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BiosConfigSetting) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BiosConfigSetting) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSettingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBiosConfigSettingHook registers your hook function for all future operations.
func AddBiosConfigSettingHook(hookPoint boil.HookPoint, biosConfigSettingHook BiosConfigSettingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		biosConfigSettingAfterSelectHooks = append(biosConfigSettingAfterSelectHooks, biosConfigSettingHook)
	case boil.BeforeInsertHook:
		biosConfigSettingBeforeInsertHooks = append(biosConfigSettingBeforeInsertHooks, biosConfigSettingHook)
	case boil.AfterInsertHook:
		biosConfigSettingAfterInsertHooks = append(biosConfigSettingAfterInsertHooks, biosConfigSettingHook)
	case boil.BeforeUpdateHook:
		biosConfigSettingBeforeUpdateHooks = append(biosConfigSettingBeforeUpdateHooks, biosConfigSettingHook)
	case boil.AfterUpdateHook:
		biosConfigSettingAfterUpdateHooks = append(biosConfigSettingAfterUpdateHooks, biosConfigSettingHook)
	case boil.BeforeDeleteHook:
		biosConfigSettingBeforeDeleteHooks = append(biosConfigSettingBeforeDeleteHooks, biosConfigSettingHook)
	case boil.AfterDeleteHook:
		biosConfigSettingAfterDeleteHooks = append(biosConfigSettingAfterDeleteHooks, biosConfigSettingHook)
	case boil.BeforeUpsertHook:
		biosConfigSettingBeforeUpsertHooks = append(biosConfigSettingBeforeUpsertHooks, biosConfigSettingHook)
	case boil.AfterUpsertHook:
		biosConfigSettingAfterUpsertHooks = append(biosConfigSettingAfterUpsertHooks, biosConfigSettingHook)
	}
}

// One returns a single biosConfigSetting record from the query.
func (q biosConfigSettingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BiosConfigSetting, error) {
	o := &BiosConfigSetting{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bios_config_settings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BiosConfigSetting records from the query.
func (q biosConfigSettingQuery) All(ctx context.Context, exec boil.ContextExecutor) (BiosConfigSettingSlice, error) {
	var o []*BiosConfigSetting

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BiosConfigSetting slice")
	}

	if len(biosConfigSettingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BiosConfigSetting records in the query.
func (q biosConfigSettingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bios_config_settings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q biosConfigSettingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bios_config_settings exists")
	}

	return count > 0, nil
}

// FKBiosConfigComponent pointed to by the foreign key.
func (o *BiosConfigSetting) FKBiosConfigComponent(mods ...qm.QueryMod) biosConfigComponentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FKBiosConfigComponentID),
	}

	queryMods = append(queryMods, mods...)

	return BiosConfigComponents(queryMods...)
}

// LoadFKBiosConfigComponent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (biosConfigSettingL) LoadFKBiosConfigComponent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiosConfigSetting interface{}, mods queries.Applicator) error {
	var slice []*BiosConfigSetting
	var object *BiosConfigSetting

	if singular {
		object = maybeBiosConfigSetting.(*BiosConfigSetting)
	} else {
		slice = *maybeBiosConfigSetting.(*[]*BiosConfigSetting)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &biosConfigSettingR{}
		}
		args = append(args, object.FKBiosConfigComponentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biosConfigSettingR{}
			}

			for _, a := range args {
				if a == obj.FKBiosConfigComponentID {
					continue Outer
				}
			}

			args = append(args, obj.FKBiosConfigComponentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bios_config_components`),
		qm.WhereIn(`bios_config_components.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BiosConfigComponent")
	}

	var resultSlice []*BiosConfigComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BiosConfigComponent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bios_config_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bios_config_components")
	}

	if len(biosConfigSettingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FKBiosConfigComponent = foreign
		if foreign.R == nil {
			foreign.R = &biosConfigComponentR{}
		}
		foreign.R.FKBiosConfigComponentBiosConfigSettings = append(foreign.R.FKBiosConfigComponentBiosConfigSettings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FKBiosConfigComponentID == foreign.ID {
				local.R.FKBiosConfigComponent = foreign
				if foreign.R == nil {
					foreign.R = &biosConfigComponentR{}
				}
				foreign.R.FKBiosConfigComponentBiosConfigSettings = append(foreign.R.FKBiosConfigComponentBiosConfigSettings, local)
				break
			}
		}
	}

	return nil
}

// SetFKBiosConfigComponent of the biosConfigSetting to the related item.
// Sets o.R.FKBiosConfigComponent to related.
// Adds o to related.R.FKBiosConfigComponentBiosConfigSettings.
func (o *BiosConfigSetting) SetFKBiosConfigComponent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BiosConfigComponent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bios_config_settings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fk_bios_config_component_id"}),
		strmangle.WhereClause("\"", "\"", 2, biosConfigSettingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FKBiosConfigComponentID = related.ID
	if o.R == nil {
		o.R = &biosConfigSettingR{
			FKBiosConfigComponent: related,
		}
	} else {
		o.R.FKBiosConfigComponent = related
	}

	if related.R == nil {
		related.R = &biosConfigComponentR{
			FKBiosConfigComponentBiosConfigSettings: BiosConfigSettingSlice{o},
		}
	} else {
		related.R.FKBiosConfigComponentBiosConfigSettings = append(related.R.FKBiosConfigComponentBiosConfigSettings, o)
	}

	return nil
}

// BiosConfigSettings retrieves all the records using an executor.
func BiosConfigSettings(mods ...qm.QueryMod) biosConfigSettingQuery {
	mods = append(mods, qm.From("\"bios_config_settings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bios_config_settings\".*"})
	}

	return biosConfigSettingQuery{q}
}

// FindBiosConfigSetting retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBiosConfigSetting(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BiosConfigSetting, error) {
	biosConfigSettingObj := &BiosConfigSetting{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bios_config_settings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, biosConfigSettingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bios_config_settings")
	}

	if err = biosConfigSettingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return biosConfigSettingObj, err
	}

	return biosConfigSettingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BiosConfigSetting) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bios_config_settings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biosConfigSettingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	biosConfigSettingInsertCacheMut.RLock()
	cache, cached := biosConfigSettingInsertCache[key]
	biosConfigSettingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			biosConfigSettingAllColumns,
			biosConfigSettingColumnsWithDefault,
			biosConfigSettingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(biosConfigSettingType, biosConfigSettingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(biosConfigSettingType, biosConfigSettingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bios_config_settings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bios_config_settings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bios_config_settings")
	}

	if !cached {
		biosConfigSettingInsertCacheMut.Lock()
		biosConfigSettingInsertCache[key] = cache
		biosConfigSettingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BiosConfigSetting.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BiosConfigSetting) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	biosConfigSettingUpdateCacheMut.RLock()
	cache, cached := biosConfigSettingUpdateCache[key]
	biosConfigSettingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			biosConfigSettingAllColumns,
			biosConfigSettingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bios_config_settings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bios_config_settings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, biosConfigSettingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(biosConfigSettingType, biosConfigSettingMapping, append(wl, biosConfigSettingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bios_config_settings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bios_config_settings")
	}

	if !cached {
		biosConfigSettingUpdateCacheMut.Lock()
		biosConfigSettingUpdateCache[key] = cache
		biosConfigSettingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q biosConfigSettingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bios_config_settings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bios_config_settings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BiosConfigSettingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biosConfigSettingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bios_config_settings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, biosConfigSettingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in biosConfigSetting slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all biosConfigSetting")
	}
	return rowsAff, nil
}

// Delete deletes a single BiosConfigSetting record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BiosConfigSetting) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BiosConfigSetting provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), biosConfigSettingPrimaryKeyMapping)
	sql := "DELETE FROM \"bios_config_settings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bios_config_settings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bios_config_settings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q biosConfigSettingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no biosConfigSettingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bios_config_settings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bios_config_settings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BiosConfigSettingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(biosConfigSettingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biosConfigSettingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bios_config_settings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, biosConfigSettingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from biosConfigSetting slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bios_config_settings")
	}

	if len(biosConfigSettingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BiosConfigSetting) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBiosConfigSetting(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BiosConfigSettingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BiosConfigSettingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biosConfigSettingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bios_config_settings\".* FROM \"bios_config_settings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, biosConfigSettingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BiosConfigSettingSlice")
	}

	*o = slice

	return nil
}

// BiosConfigSettingExists checks if the BiosConfigSetting row exists.
func BiosConfigSettingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bios_config_settings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bios_config_settings exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BiosConfigSetting) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bios_config_settings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biosConfigSettingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	biosConfigSettingUpsertCacheMut.RLock()
	cache, cached := biosConfigSettingUpsertCache[key]
	biosConfigSettingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			biosConfigSettingAllColumns,
			biosConfigSettingColumnsWithDefault,
			biosConfigSettingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			biosConfigSettingAllColumns,
			biosConfigSettingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bios_config_settings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(biosConfigSettingPrimaryKeyColumns))
			copy(conflict, biosConfigSettingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"bios_config_settings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(biosConfigSettingType, biosConfigSettingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(biosConfigSettingType, biosConfigSettingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bios_config_settings")
	}

	if !cached {
		biosConfigSettingUpsertCacheMut.Lock()
		biosConfigSettingUpsertCache[key] = cache
		biosConfigSettingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
