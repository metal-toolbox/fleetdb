// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServerSkuMemory is an object representing the database table.
type ServerSkuMemory struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	SkuID     string    `boil:"sku_id" json:"sku_id" toml:"sku_id" yaml:"sku_id"`
	Bytes     int64     `boil:"bytes" json:"bytes" toml:"bytes" yaml:"bytes"`
	Count     int64     `boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *serverSkuMemoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serverSkuMemoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServerSkuMemoryColumns = struct {
	ID        string
	SkuID     string
	Bytes     string
	Count     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	SkuID:     "sku_id",
	Bytes:     "bytes",
	Count:     "count",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ServerSkuMemoryTableColumns = struct {
	ID        string
	SkuID     string
	Bytes     string
	Count     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "server_sku_memory.id",
	SkuID:     "server_sku_memory.sku_id",
	Bytes:     "server_sku_memory.bytes",
	Count:     "server_sku_memory.count",
	CreatedAt: "server_sku_memory.created_at",
	UpdatedAt: "server_sku_memory.updated_at",
}

// Generated where

var ServerSkuMemoryWhere = struct {
	ID        whereHelperstring
	SkuID     whereHelperstring
	Bytes     whereHelperint64
	Count     whereHelperint64
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"server_sku_memory\".\"id\""},
	SkuID:     whereHelperstring{field: "\"server_sku_memory\".\"sku_id\""},
	Bytes:     whereHelperint64{field: "\"server_sku_memory\".\"bytes\""},
	Count:     whereHelperint64{field: "\"server_sku_memory\".\"count\""},
	CreatedAt: whereHelpernull_Time{field: "\"server_sku_memory\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"server_sku_memory\".\"updated_at\""},
}

// ServerSkuMemoryRels is where relationship names are stored.
var ServerSkuMemoryRels = struct {
	Sku string
}{
	Sku: "Sku",
}

// serverSkuMemoryR is where relationships are stored.
type serverSkuMemoryR struct {
	Sku *ServerSku `boil:"Sku" json:"Sku" toml:"Sku" yaml:"Sku"`
}

// NewStruct creates a new relationship struct
func (*serverSkuMemoryR) NewStruct() *serverSkuMemoryR {
	return &serverSkuMemoryR{}
}

func (r *serverSkuMemoryR) GetSku() *ServerSku {
	if r == nil {
		return nil
	}
	return r.Sku
}

// serverSkuMemoryL is where Load methods for each relationship are stored.
type serverSkuMemoryL struct{}

var (
	serverSkuMemoryAllColumns            = []string{"id", "sku_id", "bytes", "count", "created_at", "updated_at"}
	serverSkuMemoryColumnsWithoutDefault = []string{"sku_id", "bytes", "count"}
	serverSkuMemoryColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	serverSkuMemoryPrimaryKeyColumns     = []string{"id"}
	serverSkuMemoryGeneratedColumns      = []string{}
)

type (
	// ServerSkuMemorySlice is an alias for a slice of pointers to ServerSkuMemory.
	// This should almost always be used instead of []ServerSkuMemory.
	ServerSkuMemorySlice []*ServerSkuMemory
	// ServerSkuMemoryHook is the signature for custom ServerSkuMemory hook methods
	ServerSkuMemoryHook func(context.Context, boil.ContextExecutor, *ServerSkuMemory) error

	serverSkuMemoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serverSkuMemoryType                 = reflect.TypeOf(&ServerSkuMemory{})
	serverSkuMemoryMapping              = queries.MakeStructMapping(serverSkuMemoryType)
	serverSkuMemoryPrimaryKeyMapping, _ = queries.BindMapping(serverSkuMemoryType, serverSkuMemoryMapping, serverSkuMemoryPrimaryKeyColumns)
	serverSkuMemoryInsertCacheMut       sync.RWMutex
	serverSkuMemoryInsertCache          = make(map[string]insertCache)
	serverSkuMemoryUpdateCacheMut       sync.RWMutex
	serverSkuMemoryUpdateCache          = make(map[string]updateCache)
	serverSkuMemoryUpsertCacheMut       sync.RWMutex
	serverSkuMemoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serverSkuMemoryAfterSelectHooks []ServerSkuMemoryHook

var serverSkuMemoryBeforeInsertHooks []ServerSkuMemoryHook
var serverSkuMemoryAfterInsertHooks []ServerSkuMemoryHook

var serverSkuMemoryBeforeUpdateHooks []ServerSkuMemoryHook
var serverSkuMemoryAfterUpdateHooks []ServerSkuMemoryHook

var serverSkuMemoryBeforeDeleteHooks []ServerSkuMemoryHook
var serverSkuMemoryAfterDeleteHooks []ServerSkuMemoryHook

var serverSkuMemoryBeforeUpsertHooks []ServerSkuMemoryHook
var serverSkuMemoryAfterUpsertHooks []ServerSkuMemoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServerSkuMemory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServerSkuMemory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServerSkuMemory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServerSkuMemory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServerSkuMemory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServerSkuMemory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServerSkuMemory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServerSkuMemory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServerSkuMemory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serverSkuMemoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServerSkuMemoryHook registers your hook function for all future operations.
func AddServerSkuMemoryHook(hookPoint boil.HookPoint, serverSkuMemoryHook ServerSkuMemoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		serverSkuMemoryAfterSelectHooks = append(serverSkuMemoryAfterSelectHooks, serverSkuMemoryHook)
	case boil.BeforeInsertHook:
		serverSkuMemoryBeforeInsertHooks = append(serverSkuMemoryBeforeInsertHooks, serverSkuMemoryHook)
	case boil.AfterInsertHook:
		serverSkuMemoryAfterInsertHooks = append(serverSkuMemoryAfterInsertHooks, serverSkuMemoryHook)
	case boil.BeforeUpdateHook:
		serverSkuMemoryBeforeUpdateHooks = append(serverSkuMemoryBeforeUpdateHooks, serverSkuMemoryHook)
	case boil.AfterUpdateHook:
		serverSkuMemoryAfterUpdateHooks = append(serverSkuMemoryAfterUpdateHooks, serverSkuMemoryHook)
	case boil.BeforeDeleteHook:
		serverSkuMemoryBeforeDeleteHooks = append(serverSkuMemoryBeforeDeleteHooks, serverSkuMemoryHook)
	case boil.AfterDeleteHook:
		serverSkuMemoryAfterDeleteHooks = append(serverSkuMemoryAfterDeleteHooks, serverSkuMemoryHook)
	case boil.BeforeUpsertHook:
		serverSkuMemoryBeforeUpsertHooks = append(serverSkuMemoryBeforeUpsertHooks, serverSkuMemoryHook)
	case boil.AfterUpsertHook:
		serverSkuMemoryAfterUpsertHooks = append(serverSkuMemoryAfterUpsertHooks, serverSkuMemoryHook)
	}
}

// One returns a single serverSkuMemory record from the query.
func (q serverSkuMemoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServerSkuMemory, error) {
	o := &ServerSkuMemory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for server_sku_memory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServerSkuMemory records from the query.
func (q serverSkuMemoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServerSkuMemorySlice, error) {
	var o []*ServerSkuMemory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServerSkuMemory slice")
	}

	if len(serverSkuMemoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServerSkuMemory records in the query.
func (q serverSkuMemoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count server_sku_memory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serverSkuMemoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if server_sku_memory exists")
	}

	return count > 0, nil
}

// Sku pointed to by the foreign key.
func (o *ServerSkuMemory) Sku(mods ...qm.QueryMod) serverSkuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SkuID),
	}

	queryMods = append(queryMods, mods...)

	return ServerSkus(queryMods...)
}

// LoadSku allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (serverSkuMemoryL) LoadSku(ctx context.Context, e boil.ContextExecutor, singular bool, maybeServerSkuMemory interface{}, mods queries.Applicator) error {
	var slice []*ServerSkuMemory
	var object *ServerSkuMemory

	if singular {
		var ok bool
		object, ok = maybeServerSkuMemory.(*ServerSkuMemory)
		if !ok {
			object = new(ServerSkuMemory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeServerSkuMemory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeServerSkuMemory))
			}
		}
	} else {
		s, ok := maybeServerSkuMemory.(*[]*ServerSkuMemory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeServerSkuMemory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeServerSkuMemory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &serverSkuMemoryR{}
		}
		args = append(args, object.SkuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &serverSkuMemoryR{}
			}

			for _, a := range args {
				if a == obj.SkuID {
					continue Outer
				}
			}

			args = append(args, obj.SkuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_sku`),
		qm.WhereIn(`server_sku.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ServerSku")
	}

	var resultSlice []*ServerSku
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ServerSku")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for server_sku")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_sku")
	}

	if len(serverSkuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sku = foreign
		if foreign.R == nil {
			foreign.R = &serverSkuR{}
		}
		foreign.R.SkuServerSkuMemories = append(foreign.R.SkuServerSkuMemories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SkuID == foreign.ID {
				local.R.Sku = foreign
				if foreign.R == nil {
					foreign.R = &serverSkuR{}
				}
				foreign.R.SkuServerSkuMemories = append(foreign.R.SkuServerSkuMemories, local)
				break
			}
		}
	}

	return nil
}

// SetSku of the serverSkuMemory to the related item.
// Sets o.R.Sku to related.
// Adds o to related.R.SkuServerSkuMemories.
func (o *ServerSkuMemory) SetSku(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ServerSku) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"server_sku_memory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sku_id"}),
		strmangle.WhereClause("\"", "\"", 2, serverSkuMemoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SkuID = related.ID
	if o.R == nil {
		o.R = &serverSkuMemoryR{
			Sku: related,
		}
	} else {
		o.R.Sku = related
	}

	if related.R == nil {
		related.R = &serverSkuR{
			SkuServerSkuMemories: ServerSkuMemorySlice{o},
		}
	} else {
		related.R.SkuServerSkuMemories = append(related.R.SkuServerSkuMemories, o)
	}

	return nil
}

// ServerSkuMemories retrieves all the records using an executor.
func ServerSkuMemories(mods ...qm.QueryMod) serverSkuMemoryQuery {
	mods = append(mods, qm.From("\"server_sku_memory\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"server_sku_memory\".*"})
	}

	return serverSkuMemoryQuery{q}
}

// FindServerSkuMemory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServerSkuMemory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ServerSkuMemory, error) {
	serverSkuMemoryObj := &ServerSkuMemory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"server_sku_memory\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serverSkuMemoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from server_sku_memory")
	}

	if err = serverSkuMemoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serverSkuMemoryObj, err
	}

	return serverSkuMemoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServerSkuMemory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku_memory provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuMemoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serverSkuMemoryInsertCacheMut.RLock()
	cache, cached := serverSkuMemoryInsertCache[key]
	serverSkuMemoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serverSkuMemoryAllColumns,
			serverSkuMemoryColumnsWithDefault,
			serverSkuMemoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serverSkuMemoryType, serverSkuMemoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serverSkuMemoryType, serverSkuMemoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"server_sku_memory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"server_sku_memory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into server_sku_memory")
	}

	if !cached {
		serverSkuMemoryInsertCacheMut.Lock()
		serverSkuMemoryInsertCache[key] = cache
		serverSkuMemoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServerSkuMemory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServerSkuMemory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serverSkuMemoryUpdateCacheMut.RLock()
	cache, cached := serverSkuMemoryUpdateCache[key]
	serverSkuMemoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serverSkuMemoryAllColumns,
			serverSkuMemoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update server_sku_memory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"server_sku_memory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, serverSkuMemoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serverSkuMemoryType, serverSkuMemoryMapping, append(wl, serverSkuMemoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update server_sku_memory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for server_sku_memory")
	}

	if !cached {
		serverSkuMemoryUpdateCacheMut.Lock()
		serverSkuMemoryUpdateCache[key] = cache
		serverSkuMemoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serverSkuMemoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for server_sku_memory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for server_sku_memory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServerSkuMemorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuMemoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"server_sku_memory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serverSkuMemoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serverSkuMemory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serverSkuMemory")
	}
	return rowsAff, nil
}

// Delete deletes a single ServerSkuMemory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServerSkuMemory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServerSkuMemory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serverSkuMemoryPrimaryKeyMapping)
	sql := "DELETE FROM \"server_sku_memory\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from server_sku_memory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for server_sku_memory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serverSkuMemoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serverSkuMemoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from server_sku_memory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku_memory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServerSkuMemorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serverSkuMemoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuMemoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"server_sku_memory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuMemoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serverSkuMemory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for server_sku_memory")
	}

	if len(serverSkuMemoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServerSkuMemory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServerSkuMemory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServerSkuMemorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServerSkuMemorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serverSkuMemoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"server_sku_memory\".* FROM \"server_sku_memory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serverSkuMemoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServerSkuMemorySlice")
	}

	*o = slice

	return nil
}

// ServerSkuMemoryExists checks if the ServerSkuMemory row exists.
func ServerSkuMemoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"server_sku_memory\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if server_sku_memory exists")
	}

	return exists, nil
}

// Exists checks if the ServerSkuMemory row exists.
func (o *ServerSkuMemory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ServerSkuMemoryExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ServerSkuMemory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no server_sku_memory provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serverSkuMemoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serverSkuMemoryUpsertCacheMut.RLock()
	cache, cached := serverSkuMemoryUpsertCache[key]
	serverSkuMemoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serverSkuMemoryAllColumns,
			serverSkuMemoryColumnsWithDefault,
			serverSkuMemoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			serverSkuMemoryAllColumns,
			serverSkuMemoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert server_sku_memory, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(serverSkuMemoryPrimaryKeyColumns))
			copy(conflict, serverSkuMemoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"server_sku_memory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(serverSkuMemoryType, serverSkuMemoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serverSkuMemoryType, serverSkuMemoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert server_sku_memory")
	}

	if !cached {
		serverSkuMemoryUpsertCacheMut.Lock()
		serverSkuMemoryUpsertCache[key] = cache
		serverSkuMemoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
