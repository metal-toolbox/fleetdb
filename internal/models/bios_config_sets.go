// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BiosConfigSet is an object representing the database table.
type BiosConfigSet struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Version   string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *biosConfigSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L biosConfigSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BiosConfigSetColumns = struct {
	ID        string
	Name      string
	Version   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Version:   "version",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var BiosConfigSetTableColumns = struct {
	ID        string
	Name      string
	Version   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "bios_config_sets.id",
	Name:      "bios_config_sets.name",
	Version:   "bios_config_sets.version",
	CreatedAt: "bios_config_sets.created_at",
	UpdatedAt: "bios_config_sets.updated_at",
}

// Generated where

var BiosConfigSetWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	Version   whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"bios_config_sets\".\"id\""},
	Name:      whereHelperstring{field: "\"bios_config_sets\".\"name\""},
	Version:   whereHelperstring{field: "\"bios_config_sets\".\"version\""},
	CreatedAt: whereHelpernull_Time{field: "\"bios_config_sets\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"bios_config_sets\".\"updated_at\""},
}

// BiosConfigSetRels is where relationship names are stored.
var BiosConfigSetRels = struct {
	FKBiosConfigSetBiosConfigComponents string
}{
	FKBiosConfigSetBiosConfigComponents: "FKBiosConfigSetBiosConfigComponents",
}

// biosConfigSetR is where relationships are stored.
type biosConfigSetR struct {
	FKBiosConfigSetBiosConfigComponents BiosConfigComponentSlice `boil:"FKBiosConfigSetBiosConfigComponents" json:"FKBiosConfigSetBiosConfigComponents" toml:"FKBiosConfigSetBiosConfigComponents" yaml:"FKBiosConfigSetBiosConfigComponents"`
}

// NewStruct creates a new relationship struct
func (*biosConfigSetR) NewStruct() *biosConfigSetR {
	return &biosConfigSetR{}
}

func (r *biosConfigSetR) GetFKBiosConfigSetBiosConfigComponents() BiosConfigComponentSlice {
	if r == nil {
		return nil
	}
	return r.FKBiosConfigSetBiosConfigComponents
}

// biosConfigSetL is where Load methods for each relationship are stored.
type biosConfigSetL struct{}

var (
	biosConfigSetAllColumns            = []string{"id", "name", "version", "created_at", "updated_at"}
	biosConfigSetColumnsWithoutDefault = []string{"name", "version"}
	biosConfigSetColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	biosConfigSetPrimaryKeyColumns     = []string{"id"}
	biosConfigSetGeneratedColumns      = []string{}
)

type (
	// BiosConfigSetSlice is an alias for a slice of pointers to BiosConfigSet.
	// This should almost always be used instead of []BiosConfigSet.
	BiosConfigSetSlice []*BiosConfigSet
	// BiosConfigSetHook is the signature for custom BiosConfigSet hook methods
	BiosConfigSetHook func(context.Context, boil.ContextExecutor, *BiosConfigSet) error

	biosConfigSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	biosConfigSetType                 = reflect.TypeOf(&BiosConfigSet{})
	biosConfigSetMapping              = queries.MakeStructMapping(biosConfigSetType)
	biosConfigSetPrimaryKeyMapping, _ = queries.BindMapping(biosConfigSetType, biosConfigSetMapping, biosConfigSetPrimaryKeyColumns)
	biosConfigSetInsertCacheMut       sync.RWMutex
	biosConfigSetInsertCache          = make(map[string]insertCache)
	biosConfigSetUpdateCacheMut       sync.RWMutex
	biosConfigSetUpdateCache          = make(map[string]updateCache)
	biosConfigSetUpsertCacheMut       sync.RWMutex
	biosConfigSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var biosConfigSetAfterSelectHooks []BiosConfigSetHook

var biosConfigSetBeforeInsertHooks []BiosConfigSetHook
var biosConfigSetAfterInsertHooks []BiosConfigSetHook

var biosConfigSetBeforeUpdateHooks []BiosConfigSetHook
var biosConfigSetAfterUpdateHooks []BiosConfigSetHook

var biosConfigSetBeforeDeleteHooks []BiosConfigSetHook
var biosConfigSetAfterDeleteHooks []BiosConfigSetHook

var biosConfigSetBeforeUpsertHooks []BiosConfigSetHook
var biosConfigSetAfterUpsertHooks []BiosConfigSetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BiosConfigSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BiosConfigSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BiosConfigSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BiosConfigSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BiosConfigSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BiosConfigSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BiosConfigSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BiosConfigSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BiosConfigSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range biosConfigSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBiosConfigSetHook registers your hook function for all future operations.
func AddBiosConfigSetHook(hookPoint boil.HookPoint, biosConfigSetHook BiosConfigSetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		biosConfigSetAfterSelectHooks = append(biosConfigSetAfterSelectHooks, biosConfigSetHook)
	case boil.BeforeInsertHook:
		biosConfigSetBeforeInsertHooks = append(biosConfigSetBeforeInsertHooks, biosConfigSetHook)
	case boil.AfterInsertHook:
		biosConfigSetAfterInsertHooks = append(biosConfigSetAfterInsertHooks, biosConfigSetHook)
	case boil.BeforeUpdateHook:
		biosConfigSetBeforeUpdateHooks = append(biosConfigSetBeforeUpdateHooks, biosConfigSetHook)
	case boil.AfterUpdateHook:
		biosConfigSetAfterUpdateHooks = append(biosConfigSetAfterUpdateHooks, biosConfigSetHook)
	case boil.BeforeDeleteHook:
		biosConfigSetBeforeDeleteHooks = append(biosConfigSetBeforeDeleteHooks, biosConfigSetHook)
	case boil.AfterDeleteHook:
		biosConfigSetAfterDeleteHooks = append(biosConfigSetAfterDeleteHooks, biosConfigSetHook)
	case boil.BeforeUpsertHook:
		biosConfigSetBeforeUpsertHooks = append(biosConfigSetBeforeUpsertHooks, biosConfigSetHook)
	case boil.AfterUpsertHook:
		biosConfigSetAfterUpsertHooks = append(biosConfigSetAfterUpsertHooks, biosConfigSetHook)
	}
}

// One returns a single biosConfigSet record from the query.
func (q biosConfigSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BiosConfigSet, error) {
	o := &BiosConfigSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bios_config_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BiosConfigSet records from the query.
func (q biosConfigSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (BiosConfigSetSlice, error) {
	var o []*BiosConfigSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BiosConfigSet slice")
	}

	if len(biosConfigSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BiosConfigSet records in the query.
func (q biosConfigSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bios_config_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q biosConfigSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bios_config_sets exists")
	}

	return count > 0, nil
}

// FKBiosConfigSetBiosConfigComponents retrieves all the bios_config_component's BiosConfigComponents with an executor via fk_bios_config_set_id column.
func (o *BiosConfigSet) FKBiosConfigSetBiosConfigComponents(mods ...qm.QueryMod) biosConfigComponentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bios_config_components\".\"fk_bios_config_set_id\"=?", o.ID),
	)

	return BiosConfigComponents(queryMods...)
}

// LoadFKBiosConfigSetBiosConfigComponents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (biosConfigSetL) LoadFKBiosConfigSetBiosConfigComponents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiosConfigSet interface{}, mods queries.Applicator) error {
	var slice []*BiosConfigSet
	var object *BiosConfigSet

	if singular {
		var ok bool
		object, ok = maybeBiosConfigSet.(*BiosConfigSet)
		if !ok {
			object = new(BiosConfigSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBiosConfigSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBiosConfigSet))
			}
		}
	} else {
		s, ok := maybeBiosConfigSet.(*[]*BiosConfigSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBiosConfigSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBiosConfigSet))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &biosConfigSetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &biosConfigSetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bios_config_components`),
		qm.WhereIn(`bios_config_components.fk_bios_config_set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bios_config_components")
	}

	var resultSlice []*BiosConfigComponent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bios_config_components")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bios_config_components")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bios_config_components")
	}

	if len(biosConfigComponentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FKBiosConfigSetBiosConfigComponents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &biosConfigComponentR{}
			}
			foreign.R.FKBiosConfigSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FKBiosConfigSetID {
				local.R.FKBiosConfigSetBiosConfigComponents = append(local.R.FKBiosConfigSetBiosConfigComponents, foreign)
				if foreign.R == nil {
					foreign.R = &biosConfigComponentR{}
				}
				foreign.R.FKBiosConfigSet = local
				break
			}
		}
	}

	return nil
}

// AddFKBiosConfigSetBiosConfigComponents adds the given related objects to the existing relationships
// of the bios_config_set, optionally inserting them as new records.
// Appends related to o.R.FKBiosConfigSetBiosConfigComponents.
// Sets related.R.FKBiosConfigSet appropriately.
func (o *BiosConfigSet) AddFKBiosConfigSetBiosConfigComponents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BiosConfigComponent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FKBiosConfigSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bios_config_components\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fk_bios_config_set_id"}),
				strmangle.WhereClause("\"", "\"", 2, biosConfigComponentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FKBiosConfigSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &biosConfigSetR{
			FKBiosConfigSetBiosConfigComponents: related,
		}
	} else {
		o.R.FKBiosConfigSetBiosConfigComponents = append(o.R.FKBiosConfigSetBiosConfigComponents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &biosConfigComponentR{
				FKBiosConfigSet: o,
			}
		} else {
			rel.R.FKBiosConfigSet = o
		}
	}
	return nil
}

// BiosConfigSets retrieves all the records using an executor.
func BiosConfigSets(mods ...qm.QueryMod) biosConfigSetQuery {
	mods = append(mods, qm.From("\"bios_config_sets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bios_config_sets\".*"})
	}

	return biosConfigSetQuery{q}
}

// FindBiosConfigSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBiosConfigSet(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BiosConfigSet, error) {
	biosConfigSetObj := &BiosConfigSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bios_config_sets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, biosConfigSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bios_config_sets")
	}

	if err = biosConfigSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return biosConfigSetObj, err
	}

	return biosConfigSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BiosConfigSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bios_config_sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biosConfigSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	biosConfigSetInsertCacheMut.RLock()
	cache, cached := biosConfigSetInsertCache[key]
	biosConfigSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			biosConfigSetAllColumns,
			biosConfigSetColumnsWithDefault,
			biosConfigSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(biosConfigSetType, biosConfigSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(biosConfigSetType, biosConfigSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bios_config_sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bios_config_sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bios_config_sets")
	}

	if !cached {
		biosConfigSetInsertCacheMut.Lock()
		biosConfigSetInsertCache[key] = cache
		biosConfigSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BiosConfigSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BiosConfigSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	biosConfigSetUpdateCacheMut.RLock()
	cache, cached := biosConfigSetUpdateCache[key]
	biosConfigSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			biosConfigSetAllColumns,
			biosConfigSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bios_config_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bios_config_sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, biosConfigSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(biosConfigSetType, biosConfigSetMapping, append(wl, biosConfigSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bios_config_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bios_config_sets")
	}

	if !cached {
		biosConfigSetUpdateCacheMut.Lock()
		biosConfigSetUpdateCache[key] = cache
		biosConfigSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q biosConfigSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bios_config_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bios_config_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BiosConfigSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biosConfigSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bios_config_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, biosConfigSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in biosConfigSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all biosConfigSet")
	}
	return rowsAff, nil
}

// Delete deletes a single BiosConfigSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BiosConfigSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BiosConfigSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), biosConfigSetPrimaryKeyMapping)
	sql := "DELETE FROM \"bios_config_sets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bios_config_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bios_config_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q biosConfigSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no biosConfigSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bios_config_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bios_config_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BiosConfigSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(biosConfigSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biosConfigSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bios_config_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, biosConfigSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from biosConfigSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bios_config_sets")
	}

	if len(biosConfigSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BiosConfigSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBiosConfigSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BiosConfigSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BiosConfigSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), biosConfigSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bios_config_sets\".* FROM \"bios_config_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, biosConfigSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BiosConfigSetSlice")
	}

	*o = slice

	return nil
}

// BiosConfigSetExists checks if the BiosConfigSet row exists.
func BiosConfigSetExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bios_config_sets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bios_config_sets exists")
	}

	return exists, nil
}

// Exists checks if the BiosConfigSet row exists.
func (o *BiosConfigSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BiosConfigSetExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BiosConfigSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bios_config_sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(biosConfigSetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	biosConfigSetUpsertCacheMut.RLock()
	cache, cached := biosConfigSetUpsertCache[key]
	biosConfigSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			biosConfigSetAllColumns,
			biosConfigSetColumnsWithDefault,
			biosConfigSetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			biosConfigSetAllColumns,
			biosConfigSetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bios_config_sets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(biosConfigSetPrimaryKeyColumns))
			copy(conflict, biosConfigSetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"bios_config_sets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(biosConfigSetType, biosConfigSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(biosConfigSetType, biosConfigSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bios_config_sets")
	}

	if !cached {
		biosConfigSetUpsertCacheMut.Lock()
		biosConfigSetUpsertCache[key] = cache
		biosConfigSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
