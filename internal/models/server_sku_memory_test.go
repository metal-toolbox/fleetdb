// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testServerSkuMemoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(serverSkuMemoryAllColumns) == len(serverSkuMemoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ServerSkuMemory{}
	if err = randomize.Struct(seed, &o, serverSkuMemoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerSkuMemory: %s", err)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, serverSkuMemoryDBTypes, false, serverSkuMemoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ServerSkuMemory: %s", err)
	}

	count, err = ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testServerSkuMemories(t *testing.T) {
	t.Parallel()

	query := ServerSkuMemories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testServerSkuMemoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerSkuMemoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ServerSkuMemories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerSkuMemoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerSkuMemorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testServerSkuMemoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ServerSkuMemoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ServerSkuMemory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ServerSkuMemoryExists to return true, but got false.")
	}
}

func testServerSkuMemoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	serverSkuMemoryFound, err := FindServerSkuMemory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if serverSkuMemoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testServerSkuMemoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ServerSkuMemories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testServerSkuMemoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ServerSkuMemories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testServerSkuMemoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	serverSkuMemoryOne := &ServerSkuMemory{}
	serverSkuMemoryTwo := &ServerSkuMemory{}
	if err = randomize.Struct(seed, serverSkuMemoryOne, serverSkuMemoryDBTypes, false, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}
	if err = randomize.Struct(seed, serverSkuMemoryTwo, serverSkuMemoryDBTypes, false, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverSkuMemoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverSkuMemoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerSkuMemories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testServerSkuMemoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	serverSkuMemoryOne := &ServerSkuMemory{}
	serverSkuMemoryTwo := &ServerSkuMemory{}
	if err = randomize.Struct(seed, serverSkuMemoryOne, serverSkuMemoryDBTypes, false, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}
	if err = randomize.Struct(seed, serverSkuMemoryTwo, serverSkuMemoryDBTypes, false, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = serverSkuMemoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = serverSkuMemoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func serverSkuMemoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func serverSkuMemoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ServerSkuMemory) error {
	*o = ServerSkuMemory{}
	return nil
}

func testServerSkuMemoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ServerSkuMemory{}
	o := &ServerSkuMemory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory object: %s", err)
	}

	AddServerSkuMemoryHook(boil.BeforeInsertHook, serverSkuMemoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryBeforeInsertHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.AfterInsertHook, serverSkuMemoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryAfterInsertHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.AfterSelectHook, serverSkuMemoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryAfterSelectHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.BeforeUpdateHook, serverSkuMemoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryBeforeUpdateHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.AfterUpdateHook, serverSkuMemoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryAfterUpdateHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.BeforeDeleteHook, serverSkuMemoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryBeforeDeleteHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.AfterDeleteHook, serverSkuMemoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryAfterDeleteHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.BeforeUpsertHook, serverSkuMemoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryBeforeUpsertHooks = []ServerSkuMemoryHook{}

	AddServerSkuMemoryHook(boil.AfterUpsertHook, serverSkuMemoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	serverSkuMemoryAfterUpsertHooks = []ServerSkuMemoryHook{}
}

func testServerSkuMemoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerSkuMemoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(serverSkuMemoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testServerSkuMemoryToOneServerSkuUsingSku(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ServerSkuMemory
	var foreign ServerSku

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, serverSkuMemoryDBTypes, false, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, serverSkuDBTypes, false, serverSkuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSku struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SkuID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sku().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddServerSkuHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ServerSku) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ServerSkuMemorySlice{&local}
	if err = local.L.LoadSku(ctx, tx, false, (*[]*ServerSkuMemory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sku == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sku = nil
	if err = local.L.LoadSku(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sku == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testServerSkuMemoryToOneSetOpServerSkuUsingSku(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ServerSkuMemory
	var b, c ServerSku

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, serverSkuMemoryDBTypes, false, strmangle.SetComplement(serverSkuMemoryPrimaryKeyColumns, serverSkuMemoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, serverSkuDBTypes, false, strmangle.SetComplement(serverSkuPrimaryKeyColumns, serverSkuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, serverSkuDBTypes, false, strmangle.SetComplement(serverSkuPrimaryKeyColumns, serverSkuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ServerSku{&b, &c} {
		err = a.SetSku(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sku != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SkuServerSkuMemories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SkuID != x.ID {
			t.Error("foreign key was wrong value", a.SkuID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SkuID))
		reflect.Indirect(reflect.ValueOf(&a.SkuID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SkuID != x.ID {
			t.Error("foreign key was wrong value", a.SkuID, x.ID)
		}
	}
}

func testServerSkuMemoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerSkuMemoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ServerSkuMemorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testServerSkuMemoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ServerSkuMemories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	serverSkuMemoryDBTypes = map[string]string{`ID`: `uuid`, `SkuID`: `uuid`, `Bytes`: `int8`, `Count`: `int8`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                      = bytes.MinRead
)

func testServerSkuMemoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(serverSkuMemoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(serverSkuMemoryAllColumns) == len(serverSkuMemoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testServerSkuMemoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(serverSkuMemoryAllColumns) == len(serverSkuMemoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ServerSkuMemory{}
	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ServerSkuMemories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, serverSkuMemoryDBTypes, true, serverSkuMemoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ServerSkuMemory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(serverSkuMemoryAllColumns, serverSkuMemoryPrimaryKeyColumns) {
		fields = serverSkuMemoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			serverSkuMemoryAllColumns,
			serverSkuMemoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ServerSkuMemorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
