// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testConfigComponentsUpsert(t *testing.T) {
	t.Parallel()

	if len(configComponentAllColumns) == len(configComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ConfigComponent{}
	if err = randomize.Struct(seed, &o, configComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ConfigComponent: %s", err)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, configComponentDBTypes, false, configComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ConfigComponent: %s", err)
	}

	count, err = ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testConfigComponents(t *testing.T) {
	t.Parallel()

	query := ConfigComponents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testConfigComponentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigComponentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ConfigComponents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigComponentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConfigComponentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigComponentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ConfigComponentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ConfigComponent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ConfigComponentExists to return true, but got false.")
	}
}

func testConfigComponentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	configComponentFound, err := FindConfigComponent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if configComponentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testConfigComponentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ConfigComponents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testConfigComponentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ConfigComponents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testConfigComponentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	configComponentOne := &ConfigComponent{}
	configComponentTwo := &ConfigComponent{}
	if err = randomize.Struct(seed, configComponentOne, configComponentDBTypes, false, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, configComponentTwo, configComponentDBTypes, false, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = configComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = configComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ConfigComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testConfigComponentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	configComponentOne := &ConfigComponent{}
	configComponentTwo := &ConfigComponent{}
	if err = randomize.Struct(seed, configComponentOne, configComponentDBTypes, false, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}
	if err = randomize.Struct(seed, configComponentTwo, configComponentDBTypes, false, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = configComponentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = configComponentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func configComponentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func configComponentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ConfigComponent) error {
	*o = ConfigComponent{}
	return nil
}

func testConfigComponentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ConfigComponent{}
	o := &ConfigComponent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, configComponentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ConfigComponent object: %s", err)
	}

	AddConfigComponentHook(boil.BeforeInsertHook, configComponentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	configComponentBeforeInsertHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.AfterInsertHook, configComponentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	configComponentAfterInsertHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.AfterSelectHook, configComponentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	configComponentAfterSelectHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.BeforeUpdateHook, configComponentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	configComponentBeforeUpdateHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.AfterUpdateHook, configComponentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	configComponentAfterUpdateHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.BeforeDeleteHook, configComponentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	configComponentBeforeDeleteHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.AfterDeleteHook, configComponentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	configComponentAfterDeleteHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.BeforeUpsertHook, configComponentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	configComponentBeforeUpsertHooks = []ConfigComponentHook{}

	AddConfigComponentHook(boil.AfterUpsertHook, configComponentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	configComponentAfterUpsertHooks = []ConfigComponentHook{}
}

func testConfigComponentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfigComponentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(configComponentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfigComponentToManyFKComponentConfigComponentSettings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ConfigComponent
	var b, c ConfigComponentSetting

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, configComponentSettingDBTypes, false, configComponentSettingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FKComponentID = a.ID
	c.FKComponentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FKComponentConfigComponentSettings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FKComponentID == b.FKComponentID {
			bFound = true
		}
		if v.FKComponentID == c.FKComponentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ConfigComponentSlice{&a}
	if err = a.L.LoadFKComponentConfigComponentSettings(ctx, tx, false, (*[]*ConfigComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FKComponentConfigComponentSettings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FKComponentConfigComponentSettings = nil
	if err = a.L.LoadFKComponentConfigComponentSettings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FKComponentConfigComponentSettings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testConfigComponentToManyAddOpFKComponentConfigComponentSettings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ConfigComponent
	var b, c, d, e ConfigComponentSetting

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, configComponentDBTypes, false, strmangle.SetComplement(configComponentPrimaryKeyColumns, configComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ConfigComponentSetting{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, configComponentSettingDBTypes, false, strmangle.SetComplement(configComponentSettingPrimaryKeyColumns, configComponentSettingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ConfigComponentSetting{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFKComponentConfigComponentSettings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FKComponentID {
			t.Error("foreign key was wrong value", a.ID, first.FKComponentID)
		}
		if a.ID != second.FKComponentID {
			t.Error("foreign key was wrong value", a.ID, second.FKComponentID)
		}

		if first.R.FKComponent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FKComponent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FKComponentConfigComponentSettings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FKComponentConfigComponentSettings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FKComponentConfigComponentSettings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testConfigComponentToOneConfigSetUsingFKConfigSet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ConfigComponent
	var foreign ConfigSet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, configComponentDBTypes, false, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, configSetDBTypes, false, configSetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigSet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FKConfigSetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FKConfigSet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddConfigSetHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ConfigSet) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ConfigComponentSlice{&local}
	if err = local.L.LoadFKConfigSet(ctx, tx, false, (*[]*ConfigComponent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FKConfigSet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FKConfigSet = nil
	if err = local.L.LoadFKConfigSet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FKConfigSet == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testConfigComponentToOneSetOpConfigSetUsingFKConfigSet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ConfigComponent
	var b, c ConfigSet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, configComponentDBTypes, false, strmangle.SetComplement(configComponentPrimaryKeyColumns, configComponentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, configSetDBTypes, false, strmangle.SetComplement(configSetPrimaryKeyColumns, configSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, configSetDBTypes, false, strmangle.SetComplement(configSetPrimaryKeyColumns, configSetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ConfigSet{&b, &c} {
		err = a.SetFKConfigSet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FKConfigSet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FKConfigSetConfigComponents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FKConfigSetID != x.ID {
			t.Error("foreign key was wrong value", a.FKConfigSetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FKConfigSetID))
		reflect.Indirect(reflect.ValueOf(&a.FKConfigSetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FKConfigSetID != x.ID {
			t.Error("foreign key was wrong value", a.FKConfigSetID, x.ID)
		}
	}
}

func testConfigComponentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConfigComponentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConfigComponentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConfigComponentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ConfigComponents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	configComponentDBTypes = map[string]string{`ID`: `uuid`, `FKConfigSetID`: `uuid`, `Name`: `string`, `Vendor`: `string`, `Model`: `string`, `Serial`: `string`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                      = bytes.MinRead
)

func testConfigComponentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(configComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(configComponentAllColumns) == len(configComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testConfigComponentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(configComponentAllColumns) == len(configComponentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ConfigComponent{}
	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ConfigComponents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, configComponentDBTypes, true, configComponentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ConfigComponent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(configComponentAllColumns, configComponentPrimaryKeyColumns) {
		fields = configComponentAllColumns
	} else {
		fields = strmangle.SetComplement(
			configComponentAllColumns,
			configComponentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ConfigComponentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
